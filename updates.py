# NNUpdates.py
import os
import re
import glob
import sys
from typing import List, Optional

from stable_baselines3 import PPO

# –¢–≤–æ—ó –º–æ–¥—É–ª—ñ
from NNUpdates.Neyron.environment import TradingEnv
from NNUpdates.Neyron.agent import TradingAgent
from NNUpdates.Neyron.data_preparer import create_market_seasons  # —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–µ–∑–æ–Ω—ñ–≤

try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.table import Table
    console = Console()
except Exception:
    console = None

def cprint(msg: str):
    if console:
        console.print(msg)
    else:
        print(msg)

MODE_DESCRIPTIONS = {
    "1": "–ù–æ–≤–µ –Ω–∞–≤—á–∞–Ω–Ω—è: —Ç—Ä–µ–Ω—É—î–º–æ PPO –∑ –Ω—É–ª—è –Ω–∞ –æ–±—Ä–∞–Ω–∏—Ö —Å–µ–∑–æ–Ω–∞—Ö.",
    "2": "–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è: –¥–æ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ *–æ—Å—Ç–∞–Ω–Ω—ñ–π* —á–µ–∫–ø–æ–π–Ω—Ç —ñ –≤—á–∏–º–æ –¥–∞–ª—ñ.",
    "3": "–î–æ–Ω–∞–≤—á–∞–Ω–Ω—è: –±–µ—Ä–µ–º–æ —á–µ–∫–ø–æ–π–Ω—Ç —ñ –≤—á–∏–º–æ –Ω–∞ –ù–û–í–ò–• —Å–µ–∑–æ–Ω–∞—Ö –∑ LR –¥–ª—è fine-tune.",
    "4": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è: –≥–∞–Ω—è—î–º–æ –æ–±—Ä–∞–Ω—ñ –µ–ø—ñ–∑–æ–¥–∏ –π –¥—Ä—É–∫—É—î–º–æ —Å—É–º–∞—Ä–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É.",
}

# ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏-–¥–µ—Ñ–æ–ª—Ç–∏ ======
MODELS_DIR_DEFAULT = "data/Updates/Neyron/models"
SEASONS_DIR_DEFAULT = "data/Updates/Neyron/seasons"
NEW_SEASONS_DIR_DEFAULT = "data/Updates/Neyron/seasons"
SKILLS_MANIFEST_DEFAULT = "NNUpdates/Neyron/skills/skills_manifest.txt"
AGENT_PROFILE_DEFAULT = "NNUpdates/Neyron/agents/my_tf_agents.txt"
P_OFF_DEFAULT = 0.0
P_MIDFLIP_DEFAULT = 0.0
TIMESTEPS_DEFAULT = 200_000
LR_FINETUNE_DEFAULT = 1e-4
DEVICE_DEFAULT = "auto"  # 'cpu' | 'cuda' | 'auto'


# ====== –£—Ç—ñ–ª—ñ—Ç–∏ ======
def prompt_str(msg: str, default: Optional[str] = None) -> str:
    tip = f" [{default}]" if default is not None else ""
    try:
        s = input(f"{msg}{tip}: ").strip()
    except EOFError:
        s = ""
    return s if s else (default or "")

def prompt_int(msg: str, default: int) -> int:
    s = prompt_str(msg, str(default))
    try:
        return int(s)
    except ValueError:
        return default

def prompt_float(msg: str, default: float) -> float:
    s = prompt_str(msg, str(default))
    try:
        return float(s)
    except ValueError:
        return default
    
def prompt_skill_params(eval_mode: bool):
    manifest = prompt_str("–®–ª—è—Ö –¥–æ skills-–º–∞–Ω—ñ—Ñ–µ—Å—Ç—É", SKILLS_MANIFEST_DEFAULT)
    profile = prompt_str("–®–ª—è—Ö –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∞–≥–µ–Ω—Ç–∞ (–º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–æ)", AGENT_PROFILE_DEFAULT)
    p_off = P_OFF_DEFAULT
    p_midflip = P_MIDFLIP_DEFAULT
    if not eval_mode:
        p_off = prompt_float("p_off (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤–∏–º–∫–Ω–µ–Ω–Ω—è)", P_OFF_DEFAULT)
        p_midflip = prompt_float("p_midflip (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è)", P_MIDFLIP_DEFAULT)
    return (manifest or None, profile or None, p_off, p_midflip)

def list_csvs(path_or_dir: str) -> List[str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ CSV –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ) –∞–±–æ –æ–¥–∏–Ω —Ñ–∞–π–ª."""
    if not path_or_dir:
        return []
    if os.path.isdir(path_or_dir):
        return sorted(glob.glob(os.path.join(path_or_dir, "**", "*.csv"), recursive=True))
    if os.path.isfile(path_or_dir) and path_or_dir.lower().endswith(".csv"):
        return [path_or_dir]
    return []

def find_latest_checkpoint(models_dir: str, prefix: str = "trading_model") -> str:
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ–π —á–µ–∫–ø–æ–π–Ω—Ç —É models_dir –∑–∞ –Ω–∞–π–±—ñ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –∫—Ä–æ–∫—ñ–≤."""
    if not os.path.isdir(models_dir):
        return ""

    candidates = glob.glob(os.path.join(models_dir, f"{prefix}_*_steps.zip"))
    best_path = ""
    best_steps = -1
    rx = re.compile(rf"{re.escape(prefix)}_(\d+)_steps\.zip$")

    for p in candidates:
        m = rx.search(os.path.basename(p))
        if m:
            steps = int(m.group(1))
            if steps > best_steps:
                best_steps = steps
                best_path = p

    if best_path:
        return best_path

    final_path = os.path.join(models_dir, "final_trading_model.zip")
    return final_path if os.path.isfile(final_path) else ""

def require_seasons(dir_or_file: str, purpose_name: str) -> List[str]:
    seasons = list_csvs(dir_or_file)
    if not seasons:
        raise FileNotFoundError(
            f"‚ùå –ù–µ –∑–Ω–∞–π—à–æ–≤ –∂–æ–¥–Ω–æ–≥–æ CSV –¥–ª—è {purpose_name} —É '{dir_or_file}'. "
            f"–ü–µ—Ä–µ–≤—ñ—Ä —à–ª—è—Ö –∞–±–æ –∑–≥–µ–Ω–µ—Ä—É–π —Å–µ–∑–æ–Ω–∏."
        )
    return seasons

def banner(msg: str):
    if console:
        cprint(Panel.fit(f" {msg} ", border_style="cyan", title="–ú–µ–Ω—é –æ–Ω–æ–≤–ª–µ–Ω—å"))
    else:
        print("\n" + "=" * 80)
        print(msg)
        print("=" * 80 + "\n")

# ====== –ü–æ—à—É–∫ –ø—ñ–¥–ø–∞–ø–æ–∫ —ñ –º–µ–Ω—é –≤–∏–±–æ—Ä—É ======
def _subdirs_with_any(root: str, patterns: List[str]) -> List[str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—ñ–¥–ø–∞–ø–∫–∏ root (1 —Ä—ñ–≤–µ–Ω—å), —É —è–∫–∏—Ö —î —Ñ–∞–π–ª–∏, —â–æ –º–∞—Ç—á–∞—Ç—å—Å—è —Ö–æ—á –æ–¥–Ω–æ–º—É pattern (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)."""
    if not os.path.isdir(root):
        return []
    subdirs = sorted([os.path.join(root, d) for d in os.listdir(root)
                      if os.path.isdir(os.path.join(root, d))])
    out = []
    for d in subdirs:
        ok = False
        for pat in patterns:
            if glob.glob(os.path.join(d, "**", pat), recursive=True):
                ok = True
                break
        if ok:
            out.append(d)
    return out

def _choose_from_list(title: str, options: List[str], add_manual: bool = True) -> str:
    """–î–∞—î –≤–∏–±—ñ—Ä —á–µ—Ä–µ–∑ questionary –∞–±–æ –∑–≤–∏—á–∞–π–Ω–∏–π –≤–≤—ñ–¥ –Ω–æ–º–µ—Ä–∞."""
    opts = list(options)
    if add_manual:
        opts.append("–í–≤–µ—Å—Ç–∏ —à–ª—è—Ö –≤—Ä—É—á–Ω—É...")
    try:
        import questionary
        choice = questionary.select(
            title,
            choices=opts,
            default=opts[0] if opts else None,
        ).ask()
        if not choice:
            return ""
        if add_manual and choice == "–í–≤–µ—Å—Ç–∏ —à–ª—è—Ö –≤—Ä—É—á–Ω—É...":
            return prompt_str("–í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö")
        return choice
    except Exception:
        # –§–æ–ª–±–µ–∫: –Ω–æ–º–µ—Ä–Ω–µ –º–µ–Ω—é
        if not opts:
            return prompt_str("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –≤—Ä—É—á–Ω—É")
        print(f"\n{title}")
        for i, o in enumerate(opts, 1):
            print(f"  [{i}] {o}")
        sel = prompt_str("–í–∞—à –≤–∏–±—ñ—Ä (–Ω–æ–º–µ—Ä)", "1")
        try:
            idx = int(sel) - 1
            if idx < 0 or idx >= len(opts):
                raise ValueError
            choice = opts[idx]
            if add_manual and choice == "–í–≤–µ—Å—Ç–∏ —à–ª—è—Ö –≤—Ä—É—á–Ω—É...":
                return prompt_str("–í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö")
            return choice
        except Exception:
            return opts[0]

def choose_models_dir(root: str = MODELS_DIR_DEFAULT) -> str:
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø—ñ–¥–ø–∞–ø–∫–∏ –∑ model *.zip —ñ –ø—Ä–æ–ø–æ–Ω—É—î –≤–∏–±—ñ—Ä."""
    patterns = ["*.zip"]
    found = _subdirs_with_any(root, patterns)
    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ ‚Äî –≤—Å–µ –æ–¥–Ω–æ –¥–æ–∑–≤–æ–ª–∏–º–æ –≤–∏–±—Ä–∞—Ç–∏ root –∞–±–æ –≤—Ä—É—á–Ω—É
    options = found if found else ([root] if os.path.isdir(root) else [])
    return _choose_from_list("–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –º–æ–¥–µ–ª–µ–π:", options)

def choose_seasons_dir(root: str = SEASONS_DIR_DEFAULT) -> str:
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø—ñ–¥–ø–∞–ø–∫–∏ –∑ *.csv —Å–µ–∑–æ–Ω–∞–º–∏ —ñ –ø—Ä–æ–ø–æ–Ω—É—î –≤–∏–±—ñ—Ä."""
    patterns = ["*.csv"]
    found = _subdirs_with_any(root, patterns)
    options = found if found else ([root] if os.path.isdir(root) else [])
    return _choose_from_list("–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É —Å–µ–∑–æ–Ω—ñ–≤:", options)

def choose_new_seasons_dir(root: str = NEW_SEASONS_DIR_DEFAULT) -> str:
    patterns = ["*.csv"]
    found = _subdirs_with_any(root, patterns)
    options = found if found else ([root] if os.path.isdir(root) else [])
    return _choose_from_list("–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –ù–û–í–ò–• —Å–µ–∑–æ–Ω—ñ–≤:", options)

# ====== –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ–∑–æ–Ω—ñ–≤ ======
def _rename_manifests_to_txt(root_dir: str):
    patterns = [
        os.path.join(root_dir, "**", "*manifest*.csv"),
        os.path.join(root_dir, "**", "manifest.csv"),
        os.path.join(root_dir, "**", "seasons_manifest.csv"),
    ]
    changed = 0
    for pat in patterns:
        for p in glob.glob(pat, recursive=True):
            base = os.path.splitext(p)[0]
            newp = base + ".txt"
            try:
                if os.path.isfile(p):
                    os.replace(p, newp)
                    changed += 1
            except Exception:
                pass
    if changed:
        print(f"‚úèÔ∏è –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –º–∞–Ω—ñ—Ñ–µ—Å—Ç—ñ–≤ —É .txt: {changed}")

def maybe_generate_seasons_interactive():
    ans = input("\nüß© –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ —Å–µ–∑–æ–Ω–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º? (y/N): ").strip().lower()
    if ans != "y":
        return
    source_key = input("–ö–ª—é—á –¥–∂–µ—Ä–µ–ª–∞ —É FileStructureManager (–Ω–∞–ø—Ä., data_Binance) [data_Binance]: ").strip() or "data_Binance"
    out_dir    = input("–ö—É–¥–∏ –∫–ª–∞—Å—Ç–∏ —Å–µ–∑–æ–Ω–∏ [data/NNUpdates/Neyron/seasons]: ").strip() or "data/NNUpdates/Neyron/seasons"
    try:
        length = int(input("–î–æ–≤–∂–∏–Ω–∞ —Å–µ–∑–æ–Ω—É —É —Å–≤—ñ—á–∫–∞—Ö [720]: ").strip() or "720")
    except ValueError:
        length = 720
    stride_input = input(f"Stride (–∫—Ä–æ–∫ –∑—Å—É–≤—É) [{length} = –±–µ–∑ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è]: ").strip()
    try:
        stride = int(stride_input) if stride_input else length
    except ValueError:
        stride = length
    mode = input("–†–µ–∂–∏–º –∑—ñ —Å—Ç–∞—Ä–∏–º–∏ —Å–µ–∑–æ–Ω–∞–º–∏: append / overwrite / archive [append]: ").strip().lower() or "append"
    if mode not in ("append", "overwrite", "archive"):
        mode = "append"

    print("\n‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–µ–∑–æ–Ω—ñ–≤...")
    created = create_market_seasons(
        source_directory_key=source_key,
        season_length_candles=length,
        stride=stride,
        output_dir=out_dir,
        mode=mode,
        validate=True,
    )
    print(f"üì¶ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(created)} —Å–µ–∑–æ–Ω—ñ–≤ —É: {out_dir}")

    # ‚¨áÔ∏è –ù–∞ –≤–∏–ø–∞–¥–æ–∫ —Å—Ç–∞—Ä–∏—Ö –≤–µ—Ä—Å—ñ–π: –ø—Ä–∏–±–∏—Ä–∞—î–º–æ .csv-–º–∞–Ω—ñ—Ñ–µ—Å—Ç–∏ ‚Üí .txt
    _rename_manifests_to_txt(out_dir)

# ====== –†–µ–∂–∏–º–∏ ======
def mode_new_training(models_dir: str, seasons_dir: str, timesteps: int, device: str):
    banner("üÜï –ù–æ–≤–µ –Ω–∞–≤—á–∞–Ω–Ω—è (fresh train)")
    seasons = require_seasons(seasons_dir, "—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")

    manifest, profile, p_off, p_midflip = prompt_skill_params(eval_mode=False)

    env = TradingEnv(
        market_season_files=seasons,
        skills_manifest=manifest,
        profile_path=profile,
        p_off=p_off,
        p_midflip=p_midflip,
    )
    agent = TradingAgent(env=env, model_save_path=models_dir)

    if device in ("cpu", "cuda"):
        try:
            agent.model.set_parameters(agent.model.get_parameters(), exact_match=False, device=device)
        except Exception:
            pass
        agent.model.device = device

    agent.train(total_timesteps=timesteps)

def mode_resume(models_dir: str, seasons_dir: str, timesteps: int, device: str):
    banner("‚èØÔ∏è –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞–≤—á–∞–Ω–Ω—è (resume)")
    ckpt = find_latest_checkpoint(models_dir)
    if not ckpt:
        raise FileNotFoundError(
            f"‚ùå –ß–µ–∫–ø–æ–π–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É '{models_dir}'. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (–∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä —à–ª—è—Ö)."
        )

    seasons = require_seasons(seasons_dir, "resume")
    manifest, profile, p_off, p_midflip = prompt_skill_params(eval_mode=False)
    env = TradingEnv(
        market_season_files=seasons,
        skills_manifest=manifest,
        profile_path=profile,
        p_off=p_off,
        p_midflip=p_midflip,
    )

    model = PPO.load(ckpt, env=env, device=device)
    model.learn(total_timesteps=timesteps, reset_num_timesteps=False, progress_bar=True)

    out_path = os.path.join(models_dir, "final_trading_model.zip")
    model.save(out_path)
    print(f"‚úÖ –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {out_path}")

def mode_finetune(models_dir: str, new_seasons_dir: str, timesteps: int, lr: float, device: str):
    banner("üß™ –î–æ–Ω–∞–≤—á–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤–∏—Ö —Å–µ–∑–æ–Ω–∞—Ö (fine-tune)")
    ckpt = find_latest_checkpoint(models_dir)
    if not ckpt:
        raise FileNotFoundError(
            f"‚ùå –ß–µ–∫–ø–æ–π–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É '{models_dir}'. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (–∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä —à–ª—è—Ö)."
        )

    new_seasons = require_seasons(new_seasons_dir, "fine-tune")
    manifest, profile, p_off, p_midflip = prompt_skill_params(eval_mode=False)
    env_new = TradingEnv(
        market_season_files=new_seasons,
        skills_manifest=manifest,
        profile_path=profile,
        p_off=p_off,
        p_midflip=p_midflip,
    )

    model = PPO.load(ckpt, device=device)  # –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–µ–∑ env
    model.set_env(env_new)
    model.learning_rate = lr

    model.learn(total_timesteps=timesteps, reset_num_timesteps=False, progress_bar=True)

    out_path = os.path.join(models_dir, "final_trading_model_finetuned.zip")
    model.save(out_path)
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–æ–Ω–∞–≤—á–µ–Ω–∞: {out_path}")

def mode_inference(models_dir: str, seasons_dir: str, episodes: int, device: str):
    banner("üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è (inference)")
    ckpt = find_latest_checkpoint(models_dir)
    if not ckpt:
        raise FileNotFoundError(
            f"‚ùå –ß–µ–∫–ø–æ–π–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É '{models_dir}'. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç—Ä–µ–Ω—É–π –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä —à–ª—è—Ö."
        )

    seasons = require_seasons(seasons_dir, "inference")
    env = TradingEnv(market_season_files=seasons)
    model = PPO.load(ckpt, env=env, device=device)

    rewards_run = []
    for ep in range(1, episodes + 1):
        obs, info = env.reset()
        done = False
        total_reward = 0.0
        steps = 0
        while not done:
            action, _ = model.predict(obs, deterministic=True)
            obs, reward, done, truncated, info = env.step(action)
            total_reward += float(reward)
            steps += 1
        print(f"   - –ï–ø—ñ–∑–æ–¥ {ep}: –∫—Ä–æ–∫—ñ–≤={steps}, —Å—É–º–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏={total_reward:.4f}")
        rewards_run.append(total_reward)

    try:
        import statistics
        mean_r = sum(rewards_run) / len(rewards_run)
        median_r = statistics.median(rewards_run)
        std_r = statistics.pstdev(rewards_run) if len(rewards_run) > 1 else 0.0
        win_rate = sum(1 for r in rewards_run if r > 0) / len(rewards_run)
        best = max(rewards_run); worst = min(rewards_run)
        print("\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó:")
        print(f"   ¬∑ –°–µ—Ä–µ–¥–Ω—è: {mean_r:.4f} | –ú–µ–¥—ñ–∞–Ω–∞: {median_r:.4f} | Std: {std_r:.4f}")
        print(f"   ¬∑ Win-rate (>0): {win_rate*100:.1f}%  ({sum(1 for r in rewards_run if r > 0)}/{len(rewards_run)})")
        print(f"   ¬∑ –ù–∞–π–∫—Ä–∞—â–∏–π: {best:.4f} | –ù–∞–π–≥—ñ—Ä—à–∏–π: {worst:.4f}")
    except Exception:
        pass

def show_main_menu_table():
    if not console:
        print("\n–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:")
        for k, v in MODE_DESCRIPTIONS.items():
            print(f"  [{k}] {v}")
        print("  [h] –ü–æ—è—Å–Ω–µ–Ω–Ω—è —Ä–µ–∂–∏–º—ñ–≤ –¥–æ–∫–ª–∞–¥–Ω–æ")
        return

    from rich.table import Table
    table = Table(show_header=True, header_style="bold")
    table.add_column("‚Ññ", style="bold cyan", width=3)
    table.add_column("–†–µ–∂–∏–º", style="bold")
    table.add_column("–©–æ —Ä–æ–±–∏—Ç—å", style="dim")
    table.add_row("1", "üÜï –ù–æ–≤–µ –Ω–∞–≤—á–∞–Ω–Ω—è (fresh train)", MODE_DESCRIPTIONS["1"])
    table.add_row("2", "‚èØÔ∏è –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è (resume)",      MODE_DESCRIPTIONS["2"])
    table.add_row("3", "üß™ –î–æ–Ω–∞–≤—á–∞–Ω–Ω—è (fine-tune)",     MODE_DESCRIPTIONS["3"])
    table.add_row("4", "üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è (inference)",   MODE_DESCRIPTIONS["4"])
    table.add_row("h", "‚ÑπÔ∏è  –ü–æ—è—Å–Ω–µ–Ω–Ω—è",                 "–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ –≤—Å—ñ—Ö –ø—É–Ω–∫—Ç–∞—Ö")
    cprint(table)

def select_mode_interactive(default_choice: str = "1") -> str:
    try:
        import questionary
        choice = questionary.select(
            "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:",
            choices=[
                questionary.Choice("üÜï  –ù–æ–≤–µ –Ω–∞–≤—á–∞–Ω–Ω—è (1)", value="1"),
                questionary.Choice("‚èØÔ∏è  –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è (2)", value="2"),
                questionary.Choice("üß™  –î–æ–Ω–∞–≤—á–∞–Ω–Ω—è (3)", value="3"),
                questionary.Choice("üé¨  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è (4)", value="4"),
                questionary.Choice("‚ÑπÔ∏è  –ü–æ—è—Å–Ω–µ–Ω–Ω—è (h)", value="h"),
            ],
            default="1",
        ).ask()
        return choice or default_choice
    except Exception:
        show_main_menu_table()
        return prompt_str("–í–∞—à –≤–∏–±—ñ—Ä", default_choice).lower()

def show_help():
    text = (
        "[bold]‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–Ω—è —Ä–µ–∂–∏–º—ñ–≤[/bold]\n\n"
        "[bold cyan]1) –ù–æ–≤–µ –Ω–∞–≤—á–∞–Ω–Ω—è (fresh train)[/bold cyan]\n"
        "‚Äì –í—ñ–∑—å–º–µ CSV —Å–µ–∑–æ–Ω–∏ –∑ –ø–∞–ø–∫–∏, —Å—Ç–≤–æ—Ä–∏—Ç—å —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ —ñ –Ω–∞–≤—á–∏—Ç—å PPO –∑ –Ω—É–ª—è.\n"
        "‚Äì –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: [i]–ø–∞–ø–∫–∞ —Å–µ–∑–æ–Ω—ñ–≤[/i], [i]–∫—Ä–æ–∫–∏ –Ω–∞–≤—á–∞–Ω–Ω—è[/i], [i]–ø—Ä–∏—Å—Ç—Ä—ñ–π cpu/cuda/auto[/i].\n\n"
        "[bold cyan]2) –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è (resume)[/bold cyan]\n"
        "‚Äì –ó–Ω–∞–π–¥–µ [i]–æ—Å—Ç–∞–Ω–Ω—ñ–π[/i] —á–µ–∫–ø–æ–π–Ω—Ç —É –ø–∞–ø—Ü—ñ –º–æ–¥–µ–ª–µ–π —ñ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è, –Ω–µ –æ–±–Ω—É–ª—è—é—á–∏ –∫—Ä–æ–∫–∏.\n"
        "‚Äì –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: [i]–ø–∞–ø–∫–∞ —Å–µ–∑–æ–Ω—ñ–≤[/i], [i]–¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∫—Ä–æ–∫–∏[/i], [i]–ø—Ä–∏—Å—Ç—Ä—ñ–π[/i].\n\n"
        "[bold cyan]3) –î–æ–Ω–∞–≤—á–∞–Ω–Ω—è (fine-tune)[/bold cyan]\n"
        "‚Äì –í—ñ–∑—å–º–µ —á–µ–∫–ø–æ–π–Ω—Ç, –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç—å [i]–ù–û–í–Ü —Å–µ–∑–æ–Ω–∏[/i], –∑–º—ñ–Ω–∏—Ç—å [i]LR[/i] —ñ –ø–æ–≤—á–∏—Ç—å —â–µ.\n"
        "‚Äì –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: [i]–ø–∞–ø–∫–∞ –ù–û–í–ò–• —Å–µ–∑–æ–Ω—ñ–≤[/i], [i]–∫—Ä–æ–∫–∏[/i], [i]LR[/i], [i]–ø—Ä–∏—Å—Ç—Ä—ñ–π[/i].\n\n"
        "[bold cyan]4) –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è (inference)[/bold cyan]\n"
        "‚Äì –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å –º–æ–¥–µ–ª—å —ñ –ø—Ä–æ–≥—Ä–∞—î –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ø—ñ–∑–æ–¥—ñ–≤, –≤–∏–≤–µ–¥–µ —Å—É–º–∞—Ä–Ω—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É.\n"
        "‚Äì –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: [i]–ø–∞–ø–∫–∞ —Å–µ–∑–æ–Ω—ñ–≤[/i], [i]–∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ø—ñ–∑–æ–¥—ñ–≤[/i], [i]–ø—Ä–∏—Å—Ç—Ä—ñ–π[/i].\n\n"
        "[dim]–ü–æ—Ä–∞–¥–∞: –ø–µ—Ä–µ–¥ –º–µ–Ω—é –º–æ–∂–Ω–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–µ–∑–æ–Ω–∏.[/dim]\n"
    )
    if console:
        cprint(Panel(text, border_style="green", title="–î–æ–≤—ñ–¥–∫–∞"))
    else:
        print(text)

# ====== –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ======
def main():
    cprint("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å...")
    maybe_generate_seasons_interactive()

    while True:
        banner("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º")
        choice = select_mode_interactive(default_choice="1")
        if choice == "h":
            show_help()
            continue

        # === –ù–û–í–ï: –≤–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –º–æ–¥–µ–ª–µ–π –∑—ñ —Å–ø–∏—Å–∫—É –ø—ñ–¥–ø–∞–ø–æ–∫ ===
        models_dir = choose_models_dir(MODELS_DIR_DEFAULT)

        if choice == "1":
            seasons_dir = choose_seasons_dir(SEASONS_DIR_DEFAULT)
            timesteps  = prompt_int("–ö-—Ç—å –∫—Ä–æ–∫—ñ–≤ –Ω–∞–≤—á–∞–Ω–Ω—è", TIMESTEPS_DEFAULT)
            device     = prompt_str("–ü—Ä–∏—Å—Ç—Ä—ñ–π (cpu/cuda/auto)", DEVICE_DEFAULT).lower()
            mode_new_training(models_dir, seasons_dir, timesteps, device)

        elif choice == "2":
            seasons_dir = choose_seasons_dir(SEASONS_DIR_DEFAULT)
            timesteps  = prompt_int("–°–∫—ñ–ª—å–∫–∏ –∫—Ä–æ–∫—ñ–≤ —â–µ –≤—á–∏—Ç–∏—Å—å", TIMESTEPS_DEFAULT)
            device     = prompt_str("–ü—Ä–∏—Å—Ç—Ä—ñ–π (cpu/cuda/auto)", DEVICE_DEFAULT).lower()
            mode_resume(models_dir, seasons_dir, timesteps, device)

        elif choice == "3":
            new_seasons_dir = choose_new_seasons_dir(NEW_SEASONS_DIR_DEFAULT)
            timesteps  = prompt_int("–°–∫—ñ–ª—å–∫–∏ –∫—Ä–æ–∫—ñ–≤ –¥–æ–Ω–∞–≤—á–∞—Ç–∏", TIMESTEPS_DEFAULT)
            lr         = prompt_float("LR –¥–ª—è fine-tune", LR_FINETUNE_DEFAULT)
            device     = prompt_str("–ü—Ä–∏—Å—Ç—Ä—ñ–π (cpu/cuda/auto)", DEVICE_DEFAULT).lower()
            mode_finetune(models_dir, new_seasons_dir, timesteps, lr, device)

        elif choice == "4":
            seasons_dir = choose_seasons_dir(SEASONS_DIR_DEFAULT)
            episodes   = prompt_int("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ø—ñ–∑–æ–¥—ñ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó", 3)
            device     = prompt_str("–ü—Ä–∏—Å—Ç—Ä—ñ–π (cpu/cuda/auto)", DEVICE_DEFAULT).lower()
            mode_inference(models_dir, seasons_dir, episodes, device)

        else:
            cprint("[bold red]‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–±—ñ—Ä. –û–±–µ—Ä—ñ—Ç—å 1‚Äì4 –∞–±–æ h –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏.[/bold red]")
            continue

        cprint("\n[bold green]‚úÖ –ì–æ—Ç–æ–≤–æ.[/bold green]")
        break

if __name__ == "__main__":
    main()
