import os
import re
import pandas as pd
import asyncio

from utils.common.FileStructureManager import FileStructureManager
from utils.common.SettingsLoader import ProcessingSettingsBuilder  # –ó–∞–º—ñ–Ω—ñ—Ç—å —à–ª—è—Ö –Ω–∞ —Å–≤—ñ–π
from utils.data_processing.DataProcessing import DataProcessingManager

class DataHandler:
    def __init__(self):
        self.fsm = FileStructureManager()
        self.settings_builder = ProcessingSettingsBuilder()
        self.settings_builder.ensure_defaults_exist()
        self.custom_indicators = None
        self.custom_patterns = None
        self.custom_algorithms = None
        self.limit_rows = 1000
        print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ.")

    def set_custom_parameters(self, indicators=None, patterns=None, algorithms=None):
        self.custom_indicators = indicators
        self.custom_patterns = patterns
        self.custom_algorithms = algorithms

    def set_files_by_symbols(self, symbols, timeframe_key, extension=".csv", limit=1000):
        self.limit_rows = limit
        directory_path = self.fsm.get_path(timeframe_key, is_file=False)

        if not directory_path:
            print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑–∞ –∫–ª—é—á–µ–º: {timeframe_key}")
            return

        selected_files = []

        for symbol in symbols:
            subfolder_path = os.path.join(directory_path, symbol)
            if not os.path.isdir(subfolder_path):
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –ø–∞–ø–∫–∞ {symbol} –Ω–µ —ñ—Å–Ω—É—î")
                continue

            for file in os.listdir(subfolder_path):
                if not file.endswith(extension):
                    continue

                name, ext = os.path.splitext(file)
                if re.search(r'_processing($|[_\.])', name):
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª: {file}")
                    continue

                if name == symbol:
                    selected_files.append(os.path.join(subfolder_path, file))
                    break  # –ó–Ω–∞–π–¥–µ–Ω–æ –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª, –¥–∞–ª—ñ –Ω–µ —à—É–∫–∞—Ç–∏

        self.files_list = selected_files
        print(f"üì¶ –í–∏–±—Ä–∞–Ω–æ {len(self.files_list)} —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")

    def get_processing_params(self):
        indicators = self.custom_indicators or self.settings_builder.get_indicator_settings()
        patterns = self.custom_patterns or self.settings_builder.get_pattern_settings()
        algorithms = self.custom_algorithms or self.settings_builder.get_algorithm_settings()
        return indicators, patterns, algorithms

    async def process_file_full(self, file_path, limit_rows=None, output_suffix: str = "_processing"):
        try:
            print(f"‚ñ∂Ô∏è –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: {file_path}")

            df = pd.read_csv(file_path)
            if 'close_time' in df.columns:
                df['close_time'] = pd.to_datetime(df['close_time'])

            row_limit = limit_rows or self.limit_rows
            if row_limit:
                df = df.tail(row_limit).reset_index(drop=True)

            indicators_params, pattern_params, algorithm_params = self.get_processing_params()

            manager = DataProcessingManager(
                df,
                indicators_params=indicators_params,
                pattern_params=pattern_params,
                algorithm_params=algorithm_params
            )
            processed_df = manager.process_all()

            custom_indicators = self.settings_builder.get_settings_from_class("DataProcessingManager", "indicators_custom")
            if custom_indicators:
                print(f"‚öôÔ∏è –î–æ–¥–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏: {custom_indicators}")
                manager_custom = DataProcessingManager(
                    processed_df,
                    indicators_params=custom_indicators
                )
                processed_df = manager_custom.process_all()

            dir_name, file_name = os.path.split(file_path)
            name, ext = os.path.splitext(file_name)
            dir_name, file_name = os.path.split(file_path)
            name, ext = os.path.splitext(file_name)
            processed_name = f"{name}{output_suffix}{ext}"
            processed_path = os.path.join(dir_name, processed_name)

            processed_df.to_csv(processed_path, index=False)
            print(f"‚úÖ –§–∞–π–ª –æ–±—Ä–æ–±–ª–µ–Ω–æ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {processed_path}")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ {file_path}: {e}")

    async def process_all_files_async(self, limit_rows=None):
        if not hasattr(self, "files_list") or not self.files_list:
            print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –í–∏–∫–ª–∏—á load_files_list() –∞–±–æ set_files_by_symbols() –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é.")
            return

        tasks = [
            self.process_file_full(file_path, limit_rows=limit_rows)
            for file_path in self.files_list
        ]
        await asyncio.gather(*tasks)

    def process_all_files(self, limit_rows=None):
        asyncio.run(self.process_all_files_async(limit_rows=limit_rows))

    def generate_strategy_data(
        self,
        raw_file_path: str,
        strategy_key: str,
        limit_rows: int = None,
        indicators: list = None,
        patterns: list = None,
        algorithms: list = None,
        output_suffix: str = "_processing"
    ) -> pd.Series:
        """
        1) –ß–∏—Ç–∞—î —Å–∏—Ä–∏–π CSV —ñ–∑ data/Strategies
        2) –û–±—Ä—ñ–∑–∞—î –¥–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö limit_rows —Ä—è–¥–∫—ñ–≤ (—è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ)
        3) –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î DataProcessingManager –∑ –≤–∞—à–∏–º–∏ (—á–∏ –∫–∞—Å—Ç–æ–º) indicators/patterns/algorithms
        4) –ó–±–µ—Ä—ñ–≥–∞—î –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª –ø–æ—Ä—É—á –∑ —Å–∏—Ä–∏–º, –¥–æ–¥–∞—é—á–∏ output_suffix –¥–æ —ñ–º–µ–Ω—ñ
        5) –Ü–Ω—Å—Ç–∞–Ω—Ü—ñ—é—î StrategyObject –¥–ª—è strategy_key —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–∏–≥–Ω–∞–ª–∏

        :param raw_file_path: —à–ª—è—Ö –¥–æ data/Strategies/<symbol>.csv
        :param strategy_key: –∫–ª—é—á —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó (–Ω–∞–∑–≤–∞ JSON-—Ñ–∞–π–ª—É –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è)
        :param limit_rows: –æ—Å—Ç–∞–Ω–Ω—ñ N —Ä—è–¥–∫—ñ–≤ (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)
        :param indicators: –∫–∞—Å—Ç–æ–º–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)
        :param patterns: –∫–∞—Å—Ç–æ–º–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏ (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)
        :param algorithms: –∫–∞—Å—Ç–æ–º–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)
        :param output_suffix: —Å—É—Ñ—ñ–∫—Å –¥–ª—è –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º "_processing")
        :return: pd.Series –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ "buy"/"sell"/"hold"
        """
        # --- 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–∏—Ä—ñ –¥–∞–Ω—ñ ---
        df = pd.read_csv(raw_file_path)
        if 'close_time' in df.columns:
            df['close_time'] = pd.to_datetime(df['close_time'])

        # --- 2. –û–±—Ä—ñ–∑–∞—î–º–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ---
        if limit_rows:
            df = df.tail(limit_rows).reset_index(drop=True)

        # --- 3. –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ ---
        settings_builder = ProcessingSettingsBuilder()
        settings_builder.ensure_defaults_exist()
        indicators_params = indicators or settings_builder.get_indicator_settings()
        pattern_params    = patterns   or settings_builder.get_pattern_settings()
        algorithm_params  = algorithms or settings_builder.get_algorithm_settings()

        # --- 4. –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ—Ä–µ–∑ –≤–∞—à DataProcessingManager ---
        manager = DataProcessingManager(
            data=df,
            indicators_params=indicators_params,
            pattern_params=pattern_params,
            algorithm_params=algorithm_params
        )
        processed_df = manager.process_all()

        # --- 5. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π CSV –ø–æ—Ä—É—á —ñ–∑ —Å–∏—Ä–∏–º ---
        dir_name, file_name = os.path.split(raw_file_path)
        name, ext = os.path.splitext(file_name)
        processed_name = f"{name}{output_suffix}{ext}"
        processed_path = os.path.join(dir_name, processed_name)
        processed_df.to_csv(processed_path, index=False)
        print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {processed_path}")

        # --- 6. –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –ø–æ –≤–∞—à—ñ–π —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó ---
        # StrategyObject –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î SettingsLoaderStrategies,
        # —Ç–æ–º—É –≤ data/Strategies/ –º–∞—î –ª–µ–∂–∞—Ç–∏ <strategy_key>_strategy.json
        from utils.strategies.StrategyObject import StrategyObject
        strat = StrategyObject(strategy_key=strategy_key, processed_data=processed_df)
        signals = strat.generate_signals()

        return signals

    def process_and_return_df(self, raw_file_path, limit_rows, indicators, patterns, algorithms):
        # --- 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–∏—Ä—ñ –¥–∞–Ω—ñ ---
        df = pd.read_csv(raw_file_path)
        if 'close_time' in df.columns:
            df['close_time'] = pd.to_datetime(df['close_time'])

        # --- 2. –û–±—Ä—ñ–∑–∞—î–º–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ---
        if limit_rows:
            df = df.tail(limit_rows).reset_index(drop=True)

        # --- 3. –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ ---
        settings_builder = ProcessingSettingsBuilder()
        settings_builder.ensure_defaults_exist()
        indicators_params = indicators or settings_builder.get_indicator_settings()
        pattern_params    = patterns   or settings_builder.get_pattern_settings()
        algorithm_params  = algorithms or settings_builder.get_algorithm_settings()

        # --- 4. –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ—Ä–µ–∑ –≤–∞—à DataProcessingManager ---
        manager = DataProcessingManager(
            data=df,
            indicators_params=indicators_params,
            pattern_params=pattern_params,
            algorithm_params=algorithm_params
        )
        processed_df = manager.process_all()
        return processed_df