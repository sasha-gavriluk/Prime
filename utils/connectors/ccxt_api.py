# utils/connectors/ccxt_api.py

import ccxt
import json
import os
import pandas as pd
import time

from utils.common.FileStructureManager import FileStructureManager

class CCXTExchangeAPI:
    def __init__(self, exchange_name: str):
        self.exchange_name = exchange_name.lower()
        self.fsm = FileStructureManager()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤
        self.keys_file = self.fsm.get_path("Settings_keys", is_file=True)
        if not self.keys_file:
            raise FileNotFoundError("–§–∞–π–ª 'Settings_keys' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        self.api_key = None
        self.api_secret = None
        self.client = None
        self.load_keys()

        # –ü–∞–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        folder_key = f"data_{self.exchange_name.capitalize()}"
        data_base_dir = os.path.join(self.fsm.root_path, 'data', self.exchange_name.capitalize())

        if not os.path.exists(data_base_dir):
            print(f"[{self.exchange_name.upper()}] üìÅ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É: {data_base_dir}")
            os.makedirs(data_base_dir, exist_ok=True)
            self.fsm.scan_and_save_structure()

        self.data_base_dir = self.fsm.get_path(folder_key, is_file=False)

        if not self.data_base_dir:
            raise FileNotFoundError(f"–ü–∞–ø–∫–∞ '{folder_key}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.")

    def load_keys(self):
        with open(self.keys_file, 'r') as file:
            keys = json.load(file)
            exchange_keys = keys.get(self.exchange_name, {})
            self.api_key = exchange_keys.get("api_key")
            self.api_secret = exchange_keys.get("api_secret")
            if not self.api_key or not self.api_secret:
                raise ValueError(f"–ö–ª—é—á—ñ –¥–ª—è '{self.exchange_name}' –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ–ø–æ–≤–Ω—ñ.")

    def connect(self):
        try:
            # –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –±—ñ—Ä–∂—É –ø—ñ–¥ —Ñ‚Äô—é—á–µ—Ä—Å–∏
            exid = self.exchange_name
            if exid in ("binance", "binanceusdm", "binance-futures", "binance_futures"):
                exid = "binanceusdm"  # USD‚ìà-M —Ñ‚Äô—é—á–µ—Ä—Å–∏
            opts = {}
            if exid == "bybit":
                # Bybit: –ø—Ä–∞—Ü—é—î–º–æ –∑—ñ —Å–≤–æ–ø–∞–º–∏ (—Ñ‚Äô—é—á–µ—Ä—Å–∏)
                opts = {"defaultType": "swap"}

            self.client = getattr(ccxt, exid)({
                "apiKey": self.api_key,
                "secret": self.api_secret,
                "enableRateLimit": True,
                "options": opts,
            })
            self.client.load_markets()
            self.ccxt_id = exid  # –∑–±–µ—Ä–µ–∂–µ–º–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π id –∫–ª—ñ—î–Ω—Ç–∞
            print(f"[{self.exchange_name.upper()}] ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ —è–∫ {self.ccxt_id}.")
        except Exception as e:
            print(f"[{self.exchange_name.upper()}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
            self.client = None


    def is_connected(self) -> bool:
        return self.client is not None

    def _get_market_symbol(self, symbol: str, params={}):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç—É—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä. 'ETH/USDT') —É —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –¥–ª—è –±—ñ—Ä–∂—ñ,
        —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ (–Ω–∞–ø—Ä. –¥–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤ Bybit).
        """
        if self.exchange_name == 'bybit' and params.get('category') == 'linear':
            if ':' not in symbol:
                return f"{symbol}:USDT"
        return symbol

    def fetch_ohlcv(self, symbol: str, timeframe: str, limit: int = 100):
        if not self.is_connected():
            raise ConnectionError("–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ.")
        try:
            ohlcv = self.client.fetch_ohlcv(symbol, timeframe, limit=limit)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['close_time'] = pd.to_datetime(df['timestamp'], unit='ms')
            return df[['close_time', 'open', 'high', 'low', 'close', 'volume']]
        except Exception as e:
            print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è fetch_ohlcv –ø–æ–º–∏–ª–∫–∞: {e}")
            return None

    def save_ohlcv(self, df: pd.DataFrame, timeframe: str, symbol: str):
        symbol_folder = symbol.replace("/", "_")
        save_path = os.path.join(self.data_base_dir, timeframe, symbol_folder)
        os.makedirs(save_path, exist_ok=True)
        file_path = os.path.join(save_path, f"{symbol_folder}.csv")
        if 'close_time' not in df.columns:
            raise ValueError("DataFrame –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫—É 'close_time'.")
        df = df.copy()
        df.loc[:, 'close_time'] = pd.to_datetime(df['close_time'], errors='coerce')
        if os.path.exists(file_path):
            existing_df = pd.read_csv(file_path)
            if 'close_time' in existing_df.columns:
                existing_df['close_time'] = pd.to_datetime(existing_df['close_time'], errors='coerce')
                existing_df.loc[:, 'close_time'] = pd.to_datetime(existing_df['close_time'], errors='coerce')
        df.to_csv(file_path, index=False)
        print(f"[{self.exchange_name.upper()}] üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: {file_path}")

    def fetch_all_symbols(self):
        if not self.is_connected():
            raise ConnectionError("–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ.")
        try:
            if not self.client.markets:
                self.client.load_markets()
            return list(self.client.markets.keys())
        except Exception as e:
            print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è fetch_all_symbols –ø–æ–º–∏–ª–∫–∞: {e}")
            return []

    def fetch_balance(self):
        if not self.is_connected():
            raise ConnectionError("–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ.")
        try:
            if self.exchange_name == 'bybit':
                return self.client.fetch_balance(params={'accountType': 'UNIFIED'})
            else:
                return self.client.fetch_balance()
        except Exception as e:
            print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è fetch_balance –ø–æ–º–∏–ª–∫–∞: {e}")
            return {}
            
    def get_usdt_balance(self) -> float:
        if not self.is_connected():
            return 0.0
        try:
            balance_data = self.fetch_balance()
            usdt_info = balance_data.get('USDT', {})
            free_balance = usdt_info.get('free')
            return float(free_balance or 0.0)

        except Exception as e:
            print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è USDT –±–∞–ª–∞–Ω—Å—É: {e}")
            return 0.0

    def update_symbol_data(self, symbol: str, standard_timeframes: list = None):
        for timeframe in standard_timeframes:
            try:
                print(f"[{self.exchange_name.upper()}] üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è {symbol} {timeframe}...")
                symbol_folder = symbol.replace("/", "_")
                save_path = os.path.join(self.data_base_dir, timeframe, symbol_folder)
                os.makedirs(save_path, exist_ok=True)
                file_path = os.path.join(save_path, f"{symbol_folder}.csv")
                from_timestamp = None
                if os.path.exists(file_path):
                    existing_df = pd.read_csv(file_path)
                    if 'close_time' in existing_df.columns and not existing_df.empty:
                        last_time = pd.to_datetime(existing_df['close_time'].max())
                        from_timestamp = int(last_time.timestamp() * 1000)
                if from_timestamp:
                    new_ohlcv = self.client.fetch_ohlcv(symbol, timeframe, since=from_timestamp, limit=1000)
                else:
                    new_ohlcv = self.client.fetch_ohlcv(symbol, timeframe, limit=1000)
                if new_ohlcv:
                    new_df = pd.DataFrame(new_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                    new_df['close_time'] = pd.to_datetime(new_df['timestamp'], unit='ms')
                    self.save_ohlcv(new_df[['close_time', 'open', 'high', 'low', 'close', 'volume']], timeframe, symbol)
                else:
                    print(f"[{self.exchange_name.upper()}] ‚ÑπÔ∏è –ù–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î.")
            except Exception as e:
                print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è {symbol} {timeframe}: {e}")

    def updates_symbols_data(self, symbols: list, standard_timeframes: list):
        for idx, symbol in enumerate(symbols, 1):
            print(f"[{self.exchange_name.upper()}] [{idx}/{len(symbols)}] {symbol}")
            self.update_symbol_data(symbol, standard_timeframes)

    def set_leverage(self, symbol: str, leverage: int, params={}):
        if not self.is_connected():
            raise ConnectionError("–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ.")
        if not self.client.has.get('setLeverage'):
            print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è –ë—ñ—Ä–∂–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–µ—á–∞ —á–µ—Ä–µ–∑ API.")
            return
        try:
            market_symbol = self._get_market_symbol(symbol, params)
            self.client.set_leverage(leverage, market_symbol, params)
            print(f"[{self.exchange_name.upper()}] ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–µ {leverage}x –¥–ª—è {market_symbol}.")
        except Exception as e:
            error_message = str(e)
            if "leverage not modified" in error_message or "110043" in error_message:
                print(f"[{self.exchange_name.upper()}] ‚ÑπÔ∏è –ü–ª–µ—á–µ –¥–ª—è {market_symbol} –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {leverage}x. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ.")
            else:
                print(f"[{self.exchange_name.upper()}] ‚ùå –°–ø—Ä–∞–≤–∂–Ω—è –ø–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–µ—á–∞ –¥–ª—è {symbol}: {e}")
                raise e

    def create_order(self, symbol: str, order_type: str, side: str, amount: float, price: float = None, params={}, stop_loss: float = None, take_profit: float = None, leverage: int = None):
        if not self.is_connected():
            raise ConnectionError("–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ.")
        order_params = params.copy()
        try:
            if self.exchange_name == 'bybit':
                order_params.update({'category': 'linear'})
            
            market_symbol = self._get_market_symbol(symbol, order_params)

            if leverage is not None:
                self.set_leverage(symbol, leverage, order_params)

            if self.exchange_name == 'bybit':
                if stop_loss:
                    order_params['stopLoss'] = str(stop_loss)
                if take_profit:
                    order_params['takeProfit'] = str(take_profit)
            
            order = self.client.create_order(market_symbol, order_type, side, amount, price, order_params)
            print(f"[{self.exchange_name.upper()}] ‚úÖ –û—Ä–¥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ: {order['id']}")
            return order
        except Exception as e:
            print(f"[{self.exchange_name.upper()}] ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: {e}")
            raise e

    def fetch_positions(self, symbols: list, params={}):
        """
        –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è —Å–ø–∏—Å–∫—É —Å–∏–º–≤–æ–ª—ñ–≤ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º.

        :param symbols: –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ['BTC/USDT', 'ETH/USDT']).
        :return: –°–ª–æ–≤–Ω–∏–∫, –¥–µ –∫–ª—é—á ‚Äî —Å–∏–º–≤–æ–ª, –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî –¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó.
        """
        if not self.is_connected() or not self.client.has.get('fetchPositions'):
            return {}
        try:
            params = params.copy()
            if self.exchange_name == 'bybit':
                params.update({'category': 'linear'})

            market_symbols = [self._get_market_symbol(s, params) for s in symbols]
            symbol_map = {m: s for s, m in zip(symbols, market_symbols)}
            positions = self.client.fetch_positions(symbols=market_symbols, params=params)

            result = {}
            for pos in positions:
                size = pos.get('size', 0) or pos.get('contracts', 0)
                if size and float(size) > 0:
                    market_symbol = pos.get('symbol')
                    std_symbol = symbol_map.get(market_symbol, market_symbol)
                    result[std_symbol] = pos
            return result
        except Exception as e:
            print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")
            return {}

    def close_position(self, symbol: str, params={}):
        if not self.is_connected():
            raise ConnectionError("–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ.")
        try:
            if self.exchange_name == 'bybit':
                params.update({'category': 'linear'})
            
            market_symbol = self._get_market_symbol(symbol, params)
            positions = self.client.fetch_positions(symbols=[market_symbol], params=params)
            open_positions = [p for p in positions if p.get('contracts') is not None and float(p.get('contracts', 0)) > 0]
            if not open_positions:
                print(f"[{self.exchange_name.upper()}] ‚ÑπÔ∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è {symbol}.")
                return None
            position_to_close = open_positions[0]
            amount = float(position_to_close['contracts'])
            side = 'sell' if position_to_close['side'] == 'long' else 'buy'
            print(f"[{self.exchange_name.upper()}] üîÑ –ó–∞–∫—Ä–∏—Ç—Ç—è {position_to_close['side']} –ø–æ–∑–∏—Ü—ñ—ó {symbol} —Ä–æ–∑–º—ñ—Ä–æ–º {amount}...")
            close_order = self.create_order(symbol, 'market', side, amount, params=params)
            return close_order
        except Exception as e:
            print(f"[{self.exchange_name.upper()}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó: {e}")
            raise e
        
    def fetch_open_orders(self, symbol: str = None, since: int = None, limit: int = None, params: dict = None):
        """
        –í—ñ–¥–∫—Ä–∏—Ç—ñ –æ—Ä–¥–µ—Ä–∏ (—Ñ‚Äô—é—á–µ—Ä—Å–∏).
        - Bybit: –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º category='linear'
        - –Ø–∫—â–æ –±—ñ—Ä–∂–∞ –≤–∏–º–∞–≥–∞—î symbol, –∞ –π–æ–≥–æ –Ω–µ –¥–∞–ª–∏ ‚Äî –∑—Ä–æ–±–∏–º–æ –æ–±—Ö—ñ–¥ –ø–æ –≤—Å—ñ—Ö —Ä–∏–Ω–∫–∞—Ö.
        """
        if not self.is_connected() or not self.client.has.get('fetchOpenOrders'):
            return []

        params = (params or {}).copy()
        try:
            if self.exchange_name == 'bybit' and 'category' not in params:
                params['category'] = 'linear'

            if symbol:
                market_symbol = self._get_market_symbol(symbol, params)
                return self.client.fetch_open_orders(market_symbol, since=since, limit=limit, params=params)

            # –¥–µ—è–∫—ñ –±—ñ—Ä–∂—ñ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –±–µ–∑ —Å–∏–º–≤–æ–ª—É
            try:
                return self.client.fetch_open_orders(None, since=since, limit=limit, params=params)
            except Exception:
                pass

            # —Ñ–æ–ª–±–µ–∫: –æ–±—ñ–π—Ç–∏ –≤—Å—ñ —Ä–∏–Ω–∫–∏ (–ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ, –∞–ª–µ –Ω–∞–¥—ñ–π–Ω–æ)
            self.client.load_markets()
            out = []
            for sym in self.client.symbols:
                ms = self._get_market_symbol(sym, params)
                try:
                    chunk = self.client.fetch_open_orders(ms, since=since, limit=limit, params=params)
                    if chunk:
                        out.extend(chunk)
                except Exception:
                    pass
                time.sleep(self.client.rateLimit / 1000.0)
            return out

        except Exception as e:
            print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤: {e}")
            return []
        
    def fetch_last_trades(self, symbol: str, limit: int = 50, params: dict = None, sort_ascending: bool = True):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ N —É–≥–æ–¥ (fills) –ë–ï–ó –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó.
        - symbol: —Ñ‚Äô—é—á–µ—Ä—Å–Ω–∏–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'BTC/USDT')
        - limit: —Å–∫—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —É–≥–æ–¥ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 50)
        - Bybit: –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è category='linear' —è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ params
        - sort_ascending: –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ —á–∞—Å–æ–º –∑—Ä–æ—Å—Ç–∞—é—á–µ (True) –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ —è–∫ –≤—ñ–¥–¥–∞—î –±—ñ—Ä–∂–∞ (False)
        """
        if not self.is_connected() or not self.client.has.get('fetchMyTrades'):
            print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è fetch_last_trades: –Ω–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ –º–µ—Ç–æ–¥ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
            return []

        params = (params or {}).copy()
        try:
            # –ó–∞ —É–º–æ–≤—á–∞–Ω–Ω—è–º –ø—Ä–∞—Ü—é—î–º–æ –ª–∏—à–µ –∑ —Ñ‚Äô—é—á–µ—Ä—Å–∞–º–∏
            if self.exchange_name == 'bybit' and 'category' not in params:
                params['category'] = 'linear'

            market_symbol = self._get_market_symbol(symbol, params)

            # --- –ü–û–ß–ê–¢–û–ö –ó–ú–Ü–ù ---
            # –í–∏—Ç—è–≥—É—î–º–æ 'since' –∑ params, —è–∫—â–æ –≤—ñ–Ω —Ç–∞–º —î.
            # –ú–µ—Ç–æ–¥ .pop() –æ—Ç—Ä–∏–º—É—î –∑–Ω–∞—á–µ–Ω–Ω—è —ñ –≤–∏–¥–∞–ª—è—î –∫–ª—é—á –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞.
            since_timestamp = params.pop('since', None)
            
            # –¢–µ–ø–µ—Ä 'since' –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ, –∞ 'params' –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥—É–±–ª—é—é—á–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
            trades = self.client.fetch_my_trades(market_symbol, since=since_timestamp, limit=limit, params=params) or []
            # --- –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù ---
            
            if sort_ascending:
                trades.sort(key=lambda t: t.get('timestamp') or 0)

            return trades

        except Exception as e:
            print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö {limit} —É–≥–æ–¥ –¥–ª—è {symbol}: {e}")
            return []

        
    def fetch_my_trades(self, symbol: str, since: int = None, limit: int = 20, params: dict = None):
        """
        –Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ‚Äô—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É.
        """
        if not self.is_connected() or not self.client.has.get('fetchMyTrades'):
            return []
        try:
            params = (params or {}).copy()
            if self.exchange_name == 'bybit' and 'category' not in params:
                params['category'] = 'linear'

            market_symbol = self._get_market_symbol(symbol, params)
            return self.client.fetch_my_trades(market_symbol, since=since, limit=limit, params=params)
        except Exception as e:
            print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —É–≥–æ–¥ –¥–ª—è {symbol}: {e}")
            return []


    def fetch_last_trades_all(self, total_limit: int = 200, per_symbol_limit: int = None, params: dict = None, symbols: list = None, only_active: bool = True, sort_ascending: bool = True):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –û–°–¢–ê–ù–ù–Ü total_limit —É–≥–æ–¥ –ø–æ –≤—Å—ñ—Ö —Ñ‚Äô—é—á–µ—Ä—Å–Ω–∏—Ö —Å–∏–º–≤–æ–ª–∞—Ö.
        –ü—Ä–∞—Ü—é—î —à–≤–∏–¥–∫–æ: –±–µ—Ä–µ –Ω–µ–≤–µ–ª–∏–∫–∏–π —Ö–≤—ñ—Å—Ç –∑ –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É, –æ–±‚Äô—î–¥–Ω—É—î, —Å–æ—Ä—Ç—É—î, –æ–±—Ä—ñ–∑–∞—î –¥–æ N.

        - total_limit: —Å–∫—ñ–ª—å–∫–∏ —É–≥–æ–¥ —Ç—Ä–µ–±–∞ –≤—Å—å–æ–≥–æ (–ø–æ –≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª–∞—Ö)
        - per_symbol_limit: —Å–∫—ñ–ª—å–∫–∏ —Ç—è–≥–Ω—É—Ç–∏ –∑ –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É (–∑–∞ –∑–∞–º–æ–≤—á. = min(total_limit, 200))
        - params: –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –±—ñ—Ä–∂—ñ (–¥–ª—è Bybit –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî category=linear –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
        - symbols: —è–∫—â–æ –∑–∞–¥–∞–Ω–æ, –æ–±—Ö–æ–¥–∏–º–æ —Ç—ñ–ª—å–∫–∏ —Ü—ñ —Å–∏–º–≤–æ–ª–∏ (—É —Ñ–æ—Ä–º–∞—Ç—ñ 'BTC/USDT', –±–µ–∑ ':USDT')
        - only_active: –±—Ä–∞—Ç–∏ –ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–∏–Ω–∫–∏
        - sort_ascending: —á–∏ –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ —á–∞—Å–æ–º ‚Üë (—ñ–Ω–∞–∫—à–µ –∑–∞–ª–∏—à–∏—Ç–∏ —è–∫ ¬´–Ω–∞–π–Ω–æ–≤—ñ—à—ñ –ø–µ—Ä—à–∏–º–∏¬ª)
        """
        if not self.is_connected() or not self.client.has.get('fetchMyTrades'):
            print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è fetch_last_trades_all: –Ω–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ –º–µ—Ç–æ–¥ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
            return []

        p = (params or {}).copy()
        try:
            # –î–ª—è Bybit –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ª—ñ–Ω—ñ–π–Ω—ñ —Ñ‚Äô—é—á–µ—Ä—Å–∏
            if self.exchange_name == 'bybit' and 'category' not in p:
                p['category'] = 'linear'

            # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤
            self.client.load_markets()
            markets = self.client.markets
            if symbols is None:
                symbols = []
                for m in markets.values():
                    if not m.get('contract'):
                        continue  # –±–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–∏
                    if only_active and not m.get('active', True):
                        continue
                    sym = m['symbol']
                    # –î–ª—è Bybit –ø–µ—Ä–µ–¥–∞—î–º–æ —É _get_market_symbol –±–∞–∑–æ–≤–∏–π –≤–∏–≥–ª—è–¥ 'BASE/QUOTE'
                    if self.exchange_name == 'bybit':
                        sym = sym.split(':')[0]
                    symbols.append(sym)
                symbols = list(dict.fromkeys(symbols))  # —É–Ω—ñ–∫–∞–ª—å–Ω—ñ, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É

            # –°–∫—ñ–ª—å–∫–∏ –±—Ä–∞—Ç–∏ –∑ –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
            per_symbol_limit = per_symbol_limit or min(total_limit, 200)

            all_trades = []
            seen = set()  # –¥–ª—è –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—ó (id, symbol)
            for sym in symbols:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∂–µ –¥–æ–¥–∞–Ω–∏–π ¬´—à–≤–∏–¥–∫–∏–π¬ª –º–µ—Ç–æ–¥ –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É
                # (–≤—ñ–Ω —Å–∞–º –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î Bybit linear —ñ –≤–∏–∫–ª–∏–∫–∞—î _get_market_symbol)
                chunk = self.fetch_last_trades(sym, limit=per_symbol_limit, params=p, sort_ascending=False)
                for t in (chunk or []):
                    key = (t.get('id'), t.get('symbol'))
                    if key[0] is not None and key not in seen:
                        seen.add(key)
                        all_trades.append(t)
                    elif key[0] is None:
                        # —è–∫—â–æ –Ω–µ–º–∞—î id ‚Äî –≤—Å–µ –æ–¥–Ω–æ –¥–æ–¥–∞—î–º–æ (—Ä—ñ–¥–∫—ñ—Å–Ω—ñ –≤–∏–ø–∞–¥–∫–∏)
                        all_trades.append(t)

                # –ø–æ–≤–∞–∂–∞—î–º–æ rateLimit
                try:
                    time.sleep(self.client.rateLimit / 1000.0)
                except Exception:
                    pass

            # –ì–ª–æ–±–∞–ª—å–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º ‚Üì, –æ–±—Ä—ñ–∑–∞–Ω–Ω—è –¥–æ N
            all_trades.sort(key=lambda t: t.get('timestamp') or 0, reverse=True)
            out = all_trades[:max(0, int(total_limit))]

            if sort_ascending:
                out.sort(key=lambda t: t.get('timestamp') or 0)

            return out

        except Exception as e:
            print(f"[{self.exchange_name.upper()}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö {total_limit} —É–≥–æ–¥ –ø–æ –≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª–∞—Ö: {e}")
            return []

    def disconnect(self):
        self.client = None
        print(f"[{self.exchange_name.upper()}] üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—Ä—É—á–Ω—É.")