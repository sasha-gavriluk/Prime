import asyncio
import aiohttp
import feedparser
import time
import sys
from typing import List, Dict

# --- –í–ò–î–ê–õ–ï–ù–û SettingsLoader ---

# –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è asyncio –Ω–∞ Windows
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

class NewsFetcher:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –∑–±–æ—Ä—É –Ω–æ–≤–∏–Ω.
    –¢–µ–ø–µ—Ä –æ—Ç—Ä–∏–º—É—î —Å–≤–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∑–æ–≤–Ω—ñ, –∞ –Ω–µ —á–∏—Ç–∞—î –∑ —Ñ–∞–π–ª—É.
    """

    def __init__(self, config: Dict):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ñ–µ—Ç—á–µ—Ä, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø–µ—Ä–µ–¥–∞–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.

        :param config: –°–ª–æ–≤–Ω–∏–∫ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏, —â–æ –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á 'sources'.
        """
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ –∑ –ø–µ—Ä–µ–¥–∞–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        self.sources = [src for src in config.get("sources", []) if src.get("enabled", False)]
        print(f"üì∞ NewsFetcher —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª –¥–ª—è –æ–±—Ä–æ–±–∫–∏: {len(self.sources)}")

    async def _fetch_rss(self, session: aiohttp.ClientSession, source_config: Dict) -> List[Dict]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç—Ä–∏–º—É—î —Ç–∞ –ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω—ñ –∑ –æ–¥–Ω–æ–≥–æ RSS-–∫–∞–Ω–∞–ª—É.
        """
        url = source_config.get("url")
        source_name = source_config.get("name")
        articles = []
        
        try:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
            async with session.get(url, timeout=10, headers=headers) as response:
                response.raise_for_status()
                feed_text = await response.text()
                feed = feedparser.parse(feed_text)
                
                for entry in feed.entries:
                    articles.append({
                        "source": source_name,
                        "headline": entry.title,
                        "url": entry.link,
                        "published": entry.get("published_parsed", time.gmtime()),
                        "summary": entry.get("summary", "")
                    })
            print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ {len(articles)} –Ω–æ–≤–∏–Ω –∑ {source_name}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {source_name}: {e}")
            
        return articles

    async def _fetch_api(self, session: aiohttp.ClientSession, source_config: Dict) -> List[Dict]:
        """–ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –∑ REST API."""
        source_name = source_config.get("name")
        print(f"‚ÑπÔ∏è –ó–∞–≥–ª—É—à–∫–∞: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API '{source_name}'...")
        return []

    async def fetch_all(self) -> List[Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞—î –∑–±—ñ—Ä –Ω–æ–≤–∏–Ω –∑ —É—Å—ñ—Ö –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª."""
        all_articles = []
        
        async with aiohttp.ClientSession() as session:
            tasks = []
            for source_config in self.sources:
                source_type = source_config.get("type")
                if source_type == "rss":
                    tasks.append(self._fetch_rss(session, source_config))
                elif source_type == "api":
                    tasks.append(self._fetch_api(session, source_config))
            
            results = await asyncio.gather(*tasks)
            
            for article_list in results:
                all_articles.extend(article_list)
        
        all_articles.sort(key=lambda x: x["published"], reverse=True)
        print(f"üìà –í—Å—å–æ–≥–æ –∑—ñ–±—Ä–∞–Ω–æ {len(all_articles)} –Ω–æ–≤–∏–Ω –∑ {len(self.sources)} –¥–∂–µ—Ä–µ–ª.")
        return all_articles
