# ConnectionController.py
from utils.connectors.ccxt_api import CCXTExchangeAPI
from utils.common.SettingsLoader import SettingsLoader
from datetime import datetime
from dateutil.relativedelta import relativedelta

class ConnectionController:
    def __init__(self):
        self.connections = {
            'Binance': CCXTExchangeAPI('binance'),
            "Bybit": CCXTExchangeAPI('bybit')
            # —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ 'Bybit': BybitAPI()
        }

        self.settings_GUI = SettingsLoader("GUI")

    def connect(self, exchange_name):
        api = self.connections.get(exchange_name)
        if api:
            api.connect()
            return api.is_connected()
        return False

    def get_api(self, exchange_name):
        return self.connections.get(exchange_name)
    
    def get_connected_exchanges(self):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö API-–∫–ª—ñ—î–Ω—Ç—ñ–≤.
        """
        return {name: api for name, api in self.connections.items() if api.is_connected()}
    
    def disconnect(self, exchange_name):
        api = self.connections.get(exchange_name)
        if api and hasattr(api, "disconnect"):
            api.disconnect()

    def _merge_pairs(self, new_pairs, key='all_pairs'):
        """
        –í–∏–∫–∞—á—É—î —ñ—Å–Ω—É—é—á—ñ –ø–∞—Ä–∏ –∑–∞ –∫–ª—é—á–µ–º `key`, –∑–ª–∏–≤–∞—î –∑ `new_pairs` –±–µ–∑ –¥—É–±–ª—ñ–≤,
        –∑–±–µ—Ä—ñ–≥–∞—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–∞–¥ —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.
        """
        existing = self.settings_GUI.get_nested_setting(
            ['user_selections', key], []
        ) or []
        merged = sorted(set(existing) | set(new_pairs))
        self.settings_GUI.update_nested_setting(
            ['user_selections', key],
            merged
        )
        return merged

    def update_common_usdt_pairs(self, limit: int = 100):
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø–∞—Ä–∏ *.USDT, —è–∫—ñ —î –æ–¥–Ω–æ—á–∞—Å–Ω–æ –Ω–∞ –≤—Å—ñ—Ö –±—ñ—Ä–∂–∞—Ö,
        –±–µ—Ä–µ –ø–µ—Ä—à—ñ `limit` –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º —ñ –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö GUI.
        """
        # 1) –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ –≤—Å—ñ API –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ
        for api in self.connections.values():
            if not api.is_connected():
                api.connect()

        # 2) –ó–±–∏—Ä–∞—î–º–æ –º–Ω–æ–∂–∏–Ω–∏ USDT-–ø–∞—Ä —ñ–∑ –∫–æ–∂–Ω–æ—ó –±—ñ—Ä–∂—ñ
        symbol_sets = []
        for name, api in self.connections.items():
            syms = api.fetch_all_symbols() or []
            usdt_syms = {s for s in syms if s.endswith('/USDT')}
            symbol_sets.append(usdt_syms)

        # 3) –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Ç–∏–Ω
        if not symbol_sets:
            common = set()
        else:
            common = set.intersection(*symbol_sets)

        # 4) –°–æ—Ä—Ç—É—î–º–æ —ñ –æ–±—Ä—ñ–∑–∞—î–º–æ –¥–æ limit
        top_common = sorted(common)[:limit]

        # 5) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ SettingsLoader –ø—ñ–¥ –∫–ª—é—á–µ–º ['user_selections','selected_pairs']
        self.settings_GUI.update_nested_setting(
            ['user_selections', 'pairs_top_ustd'],
            top_common
        )

        # –ú–µ—Ä–¥–∂–∏–º–æ –∑ all_pairs
        merged_all = self._merge_pairs(top_common, key='all_pairs')

        print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(top_common)} —Å–ø—ñ–ª—å–Ω–∏—Ö USDT-–ø–∞—Ä:", top_common)
        print(f"üîÑ all_pairs merged ({len(merged_all)} total)")
        return top_common

    def get_balances_value_usdt(self, exchange_name):
        api = self.get_api(exchange_name)
        if api:
            return api.get_usdt_balance()
        return 0

    def get_open_orders(self, exchange_name):
        api = self.get_api(exchange_name)
        if api:
            return api.fetch_open_orders()
        return []

    def get_trade_history(self, exchange_name, total_limit: int = 200, per_symbol_limit: int = None, params: dict = None, symbols: list = None, only_active: bool = True, sort_ascending: bool = True):
        api = self.get_api(exchange_name)
        if api:
            return api.fetch_last_trades_all(total_limit=total_limit, per_symbol_limit=per_symbol_limit, params=params, symbols=symbols, only_active=only_active, sort_ascending=sort_ascending)
        return []

    def get_trade_history_for_last_month(self, exchange_name, symbols: list = None, total_limit: int = 500):
        """
        –û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —É–≥–æ–¥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å.

        Args:
            exchange_name (str): –ù–∞–∑–≤–∞ –±—ñ—Ä–∂—ñ.
            symbols (list, optional): –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏. Defaults to None.
            total_limit (int, optional): –ó–∞–≥–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç —É–≥–æ–¥. Defaults to 500.

        Returns:
            list: –°–ø–∏—Å–æ–∫ —É–≥–æ–¥.
        """
        # 1. –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∞—Ç—É –º—ñ—Å—è—Ü—å —Ç–æ–º—É
        one_month_ago = datetime.now() - relativedelta(months=1)
        
        # 2. –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ timestamp —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
        since_timestamp_ms = int(one_month_ago.timestamp() * 1000)
        
        # 3. –ì–æ—Ç—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –∑–∞–ø–∏—Ç—É
        history_params = {'since': since_timestamp_ms}
        
        print(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —É–≥–æ–¥ –∑ {one_month_ago.strftime('%Y-%m-%d %H:%M:%S')}...")
        
        # 4. –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –º–µ—Ç–æ–¥ –∑ –Ω–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        return self.get_trade_history(
            exchange_name,
            symbols=symbols,
            params=history_params,
            total_limit=total_limit,
            sort_ascending=True # –ó–∞–∑–≤–∏—á–∞–π —ñ—Å—Ç–æ—Ä—ñ—é —Ö–æ—á—É—Ç—å –±–∞—á–∏—Ç–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥—ñ—á–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
        )