import re
from typing import List, Dict
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

# --- –í–ò–î–ê–õ–ï–ù–û SettingsLoader ---

class NewsAnalyzer:
    """
    –ê–Ω–∞–ª—ñ–∑—É—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –Ω–æ–≤–∏–Ω.
    –¢–µ–ø–µ—Ä –æ—Ç—Ä–∏–º—É—î —Å–≤–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∑–æ–≤–Ω—ñ.
    """

    def __init__(self, config: Dict):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø–µ—Ä–µ–¥–∞–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.

        :param config: –°–ª–æ–≤–Ω–∏–∫ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏, —â–æ –º—ñ—Å—Ç–∏—Ç—å 'keywords' —Ç–∞ 'impact_multipliers'.
        """
        self.sentiment_analyzer = SentimentIntensityAnalyzer()
        
        self.keywords_config = config.get("keywords", {})
        self.impact_multipliers = config.get("impact_multipliers", {})
        
        print("üì∞ NewsAnalyzer —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –ø–µ—Ä–µ–¥–∞–Ω–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é.")

    def analyze_sentiment(self, text: str) -> float:
        """–ê–Ω–∞–ª—ñ–∑—É—î —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–≤–µ–¥–µ–Ω–∏–π –±–∞–ª."""
        score = self.sentiment_analyzer.polarity_scores(text)
        return score['compound']

    def detect_keywords(self, text: str) -> Dict[str, List[str]]:
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤ —Ç–µ–∫—Å—Ç—ñ."""
        found_by_category = {}
        text_lower = text.lower()
        
        for category, keywords in self.keywords_config.items():
            found = []
            for keyword in keywords:
                if re.search(r'\b' + re.escape(keyword.lower()) + r'\b', text_lower):
                    found.append(keyword)
            if found:
                found_by_category[category] = found
        return found_by_category

    def calculate_impact_score(self, sentiment: float, keywords: Dict) -> float:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –±–∞–ª –≤–ø–ª–∏–≤—É."""
        impact_score = sentiment
        for category, found_list in keywords.items():
            if found_list:
                multiplier = self.impact_multipliers.get(category, 1.0)
                impact_score *= multiplier
        return max(-1.0, min(1.0, impact_score))

    def process_articles(self, articles: List[Dict]) -> List[Dict]:
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥, —è–∫–∏–π –æ–±—Ä–æ–±–ª—è—î —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π."""
        processed_articles = []
        for article in articles:
            text_to_analyze = f"{article.get('headline', '')}. {article.get('summary', '')}"
            
            sentiment_score = self.analyze_sentiment(text_to_analyze)
            found_keywords = self.detect_keywords(text_to_analyze)
            impact_score = self.calculate_impact_score(sentiment_score, found_keywords)
            
            article['sentiment_score'] = round(sentiment_score, 3)
            article['keywords'] = found_keywords
            article['impact_score'] = round(impact_score, 3)
            
            processed_articles.append(article)
        return processed_articles
