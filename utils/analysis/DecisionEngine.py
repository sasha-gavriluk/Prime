# utils/DecisionEngine.py

import time
from datetime import datetime, timezone
from typing import Dict, Optional, Tuple
import numpy as np # <-- –î–æ–¥–∞–π—Ç–µ —ñ–º–ø–æ—Ä—Ç numpy

class DecisionEngine:
    """
    DecisionEngine –æ–±'—î–¥–Ω—É—î –∞–Ω–∞–ª—ñ–∑ –∫—ñ–ª—å–∫–æ—Ö TimeframeAgent-—ñ–≤, –≤—Ä–∞—Ö–æ–≤—É—î –Ω–æ–≤–∏–Ω–∏
    —ñ —Ñ–æ—Ä–º—É—î —Ñ—ñ–Ω–∞–ª—å–Ω–µ —Ç–æ—Ä–≥–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è, –¥–∏–Ω–∞–º—ñ—á–Ω–æ –∞–¥–∞–ø—Ç—É—é—á–∏—Å—å –¥–æ —Å—Ç–∞–Ω—É —Ä–∏–Ω–∫—É.
    """

    def __init__(self, timeframe_weights: dict, metric_weights: dict, strategy_weights: dict):
        self.tf_weights = timeframe_weights
        self.base_metric_weights = metric_weights
        self.strategy_weights = strategy_weights

        self.profiles = {
            'trend': {'smc_confidence': 1.5, 'pattern_score': 0.7, 'trend_bonus': 0.5},
            'range': {'smc_confidence': 0.8, 'pattern_score': 1.5, 'trend_bonus': 0.1}
        }

        # NEW: –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —à—Ç—Ä–∞—Ñ—ñ–≤/–±–æ–Ω—É—Å—ñ–≤
        self.sr_penalty = 0.35      # —à—Ç—Ä–∞—Ñ –∑–∞ ¬´–ø–æ–∫—É–ø–∫—É –ø—ñ–¥ –æ–ø–æ—Ä–æ–º¬ª —á–∏ ¬´–ø—Ä–æ–¥–∞–∂ –Ω–∞–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é¬ª
        self.neutral_band = 0.08    # –ø–æ—Ä—ñ–≥ ¬´—Å—ñ—Ä–æ—ó –∑–æ–Ω–∏¬ª, —â–æ–± –ª–µ–≥—à–µ –¥–∞–≤–∞—Ç–∏ neutral

    # NEW: –∑—Ä—É—á–Ω–∞ —É—Ç–∏–ª—ñ—Ç–∞
    @staticmethod
    def _sigmoid(x: float) -> float:
        return 1.0 / (1.0 + np.exp(-x))


    def _get_market_state(self, analysis_results: Dict) -> str:
        """
        –í–∏–∑–Ω–∞—á–∞—î –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Ä–∏–Ω–∫—É —à–ª—è—Ö–æ–º –∑–≤–∞–∂–µ–Ω–æ–≥–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        –º—ñ–∂ —É—Å—ñ–º–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏.
        :param analysis_results: –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥ TimeframeAgent.
        :return: 'trend' –∞–±–æ 'range'.
        """
        state_scores = {'trend': 0.0, 'range': 0.0}

        for tf, metrics in analysis_results.items():
            tf_weight = self.tf_weights.get(tf, 1.0)
            state = metrics.get('market_state')
            strength = metrics.get('state_strength', 0.0)

            if state in state_scores:
                # –ì–æ–ª–æ—Å –∫–æ–∂–Ω–æ–≥–æ –¢–§ = –π–æ–≥–æ –≤–∞–≥–∞ * –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —É —Å—Ç–∞–Ω—ñ
                state_scores[state] += tf_weight * strength

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
        if not state_scores or state_scores['trend'] >= state_scores['range']:
            return 'trend'
        else:
            return 'range'
        
    def _apply_sr_penalty(self, metrics: Dict, buy_score: float, sell_score: float) -> Tuple[float, float]:
        near_sup = metrics.get('near_support', False)
        near_res = metrics.get('near_resistance', False)
        # —è–∫—â–æ –±–ª–∏–∑—å–∫–æ –¥–æ –æ–ø–æ—Ä—É ‚Äî –∑–º–µ–Ω—à—É—î–º–æ buy; —è–∫—â–æ –±–ª–∏–∑—å–∫–æ –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ ‚Äî –∑–º–µ–Ω—à—É—î–º–æ sell
        if near_res:
            buy_score *= (1.0 - self.sr_penalty)
        if near_sup:
            sell_score *= (1.0 - self.sr_penalty)
        return buy_score, sell_score


    def _calculate_news_score(self, articles: list, max_age_hours: int = 48, decay_factor: float = 0.95) -> float:
        if not articles:
            return 0.0

        total_raw_score = 0.0
        now_utc = datetime.now(timezone.utc)

        for article in articles:
            published_struct = article.get("published")
            if not published_struct: continue
            
            published_dt = datetime.fromtimestamp(time.mktime(published_struct), tz=timezone.utc)
            age_hours = (now_utc - published_dt).total_seconds() / 3600
            
            if age_hours > max_age_hours: continue

            time_decay_weight = decay_factor ** age_hours
            impact_score = article.get('impact_score', 0.0)
            total_raw_score += impact_score * time_decay_weight
        
        # –ù–û–†–ú–ê–õ–Ü–ó–ê–¶–Ü–Ø: –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Å—É–º–∞—Ä–Ω–∏–π –±–∞–ª —É –¥—ñ–∞–ø–∞–∑–æ–Ω [-1, 1]
        normalized_score = np.tanh(total_raw_score / 5.0) # –î—ñ–ª–µ–Ω–Ω—è –Ω–∞ 5 —Ä–æ–±–∏—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –º–µ–Ω—à —á—É—Ç–ª–∏–≤–æ—é
        
        print(f"[DecisionEngine] Raw News Score: {total_raw_score:.2f} -> Normalized: {normalized_score:.2f}")
        return normalized_score

    def aggregate_metrics(self, analysis_results: dict):
        # –¶–µ–π –º–µ—Ç–æ–¥ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
        aggregated, total_weights = {}, {}
        for tf, metrics in analysis_results.items():
            tf_weight = self.tf_weights.get(tf, 1.0)
            for key, value in metrics.items():
                if not isinstance(value, (int, float)): continue
                metric_weight = self.base_metric_weights.get(key, 1.0)
                weight = tf_weight * metric_weight
                if value is None: continue
                if key not in aggregated:
                    aggregated[key], total_weights[key] = 0.0, 0.0
                aggregated[key] += value * weight
                total_weights[key] += weight
        for key in aggregated:
            if total_weights[key] > 0: aggregated[key] /= total_weights[key]
        return aggregated
    
    def _aggregate_strategy_signals(self, strategy_signals: Dict) -> tuple[float, float]:
        """
        –ê–≥—Ä–µ–≥—É—î —Å–∏–≥–Ω–∞–ª–∏ –≤—ñ–¥ —É—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π.
        
        :param strategy_signals: –°–ª–æ–≤–Ω–∏–∫ {'–Ω–∞–∑–≤–∞_—Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó': 'buy'/'sell'/'hold'}
        :return: –ö–æ—Ä—Ç–µ–∂ (strategy_buy_score, strategy_sell_score)
        """
        buy_score = 0.0
        sell_score = 0.0

        if not strategy_signals:
            return 0.0, 0.0

        print("\n--- üß† –ê–≥—Ä–µ–≥–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –≤—ñ–¥ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π ---")
        for strategy_name, signal in strategy_signals.items():
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∞–≥—É –¥–ª—è —Ü—ñ—î—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó, –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω—É, —è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ
            weight = self.strategy_weights.get(strategy_name, self.strategy_weights.get("default", 1.0))
            
            if signal == 'buy':
                buy_score += weight
                print(f"  - –°—Ç—Ä–∞—Ç–µ–≥—ñ—è '{strategy_name}' –¥–æ–¥–∞—î {weight} –¥–æ –∫—É–ø—ñ–≤–ª—ñ.")
            elif signal == 'sell':
                sell_score += weight
                print(f"  - –°—Ç—Ä–∞—Ç–µ–≥—ñ—è '{strategy_name}' –¥–æ–¥–∞—î {weight} –¥–æ –ø—Ä–æ–¥–∞–∂—É.")
        
        return buy_score, sell_score


    def count_votes(self, analysis_results: dict, key: str):
        # –¶–µ–π –º–µ—Ç–æ–¥ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
        vote_counter = {}
        for tf, metrics in analysis_results.items():
            tf_weight = self.tf_weights.get(tf, 1.0)
            value = metrics.get(key)
            if value is None: continue
            vote_counter[value] = vote_counter.get(value, 0) + tf_weight
        return vote_counter

    def make_decision(self, analysis_results: Dict, news_articles: Optional[list], strategy_signals: Optional[Dict] = None):
        # 0) –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ä–∏–Ω–∫—É (—è–∫ —É —Ç–µ–±–µ —î)
        market_state = self._get_market_state(analysis_results)

        # –ø—Ä–æ—Ñ—ñ–ª—å –≤–∞–≥ –ø—ñ–¥ —Å—Ç–∞–Ω
        current_metric_weights = dict(self.base_metric_weights)
        if market_state == 'trend':
            current_metric_weights['smc_confidence'] = current_metric_weights.get('smc_confidence', 1.0) * 1.2
            current_metric_weights['pattern_buy_score'] = current_metric_weights.get('pattern_buy_score', 1.0) * 0.9
            current_metric_weights['pattern_sell_score'] = current_metric_weights.get('pattern_sell_score', 1.0) * 0.9
        else:
            current_metric_weights['pattern_buy_score'] = current_metric_weights.get('pattern_buy_score', 1.0) * 1.2
            current_metric_weights['pattern_sell_score'] = current_metric_weights.get('pattern_sell_score', 1.0) * 1.2

        total_buy_score = 0.0
        total_sell_score = 0.0
        total_weight = 0.0

        agree_bonus = 0.0
        agree = 0
        disagree = 0
        for tf, m in analysis_results.items():
            if m.get('smc_bias') == 'buy': agree += 1
            elif m.get('smc_bias') == 'sell': disagree += 1
        # –±–æ–Ω—É—Å –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–∏–π —Ä—ñ–∑–Ω–∏—Ü—ñ
        agree_bonus = max(0, agree - disagree) * 0.02  # 0.02 ‚Äî –¥—É–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π –∫—Ä–æ–∫
        total_buy_score += agree_bonus
        total_weight += 0.02 

        # 1) –∑–±–∏—Ä–∞–Ω–Ω—è –≤—ñ–¥ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤ (—Ç–≤–æ—è –ª–æ–≥—ñ–∫–∞ + –Ω–∞—à—ñ S/R-—à—Ç—Ä–∞—Ñ–∏)
        for tf, metrics in analysis_results.items():
            tf_weight = self.tf_weights.get(tf, 1.0)

            # —Å–ºc —É –ø–æ—Ç—Ä—ñ–±–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
            smc_buy_component = 0.0
            smc_sell_component = 0.0
            if metrics.get('smc_bias') == 'buy':
                smc_buy_component = metrics.get('smc_confidence', 0.0) * current_metric_weights.get('smc_confidence', 1.0)
            elif metrics.get('smc_bias') == 'sell':
                smc_sell_component = metrics.get('smc_confidence', 0.0) * current_metric_weights.get('smc_confidence', 1.0)

            buy_part = smc_buy_component + metrics.get('pattern_buy_score', 0.0) * current_metric_weights.get('pattern_buy_score', 1.0)
            sell_part = smc_sell_component + metrics.get('pattern_sell_score', 0.0) * current_metric_weights.get('pattern_sell_score', 1.0)

            # NEW: —à—Ç—Ä–∞—Ñ–∏ –ø–æ –±–ª–∏–∑—å–∫–æ—Å—Ç—ñ –¥–æ —Ä—ñ–≤–Ω—ñ–≤
            buy_part, sell_part = self._apply_sr_penalty(metrics, buy_part, sell_part)

            total_buy_score += buy_part * tf_weight
            total_sell_score += sell_part * tf_weight
            total_weight += tf_weight

        # 2) —Å–∏–≥–Ω–∞–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π (—è–∫ —É —Ç–µ–±–µ)
        if strategy_signals:
            strategy_buy_score, strategy_sell_score = self._aggregate_strategy_signals(strategy_signals)
            total_buy_score += strategy_buy_score
            total_sell_score += strategy_sell_score
            total_weight += sum(self.strategy_weights.get(s, 1.0) for s in strategy_signals.keys())

        # 3) –Ω–æ–≤–∏–Ω–∏ (—è–∫ —É —Ç–µ–±–µ)
        if self.base_metric_weights.get('news_impact', 0) > 0 and news_articles:
            news_weight = self.base_metric_weights.get('news_impact', 1.0)
            news_score = self._calculate_news_score(news_articles)  # –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ [-1, 1]
            if news_score > 0:
                total_buy_score += news_score * news_weight
            elif news_score < 0:
                total_sell_score += (-news_score) * news_weight
            total_weight += news_weight


        if total_weight == 0:
            return {"direction": "neutral", "confidence": 0.0, "reason": "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É."}

        # 4) –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ ¬´–º‚Äô—è–∫—à–∏–π¬ª –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Å
        final_buy = total_buy_score / total_weight
        final_sell = total_sell_score / total_weight
        diff = final_buy - final_sell
        # NEW: –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ —Ä—ñ–∑–Ω–∏—Ü—é —á–µ—Ä–µ–∑ —Å–∏–≥–º–æ—ó–¥—É ‚Äî –æ—Ç—Ä–∏–º—É—î–º–æ –ø–ª–∞–≤–Ω–∏–π conf –≤ [0..1]
        confidence = float(self._sigmoid(diff))  # >0.5 buy-–±—ñ–∫, <0.5 sell-–±—ñ–∫
        strength = abs(diff)

        # NEW: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞ ¬´—Å—ñ—Ä–∞ –∑–æ–Ω–∞¬ª, —â–æ–± –Ω–µ –¥–∞–≤–∞—Ç–∏ buy/sell –Ω–∞ –º—ñ–∫—Ä–æ-–ø–µ—Ä–µ–≤–∞–∑—ñ
        if abs(diff) < self.neutral_band:
            return {"direction": "neutral", "confidence": 0.0, "reason": "–°–∏–≥–Ω–∞–ª —É —Å—ñ—Ä—ñ–π –∑–æ–Ω—ñ.", "market_state": market_state}

        direction = "buy" if diff > 0 else "sell"
        return {
            "direction": direction,
            "confidence": round(confidence, 3),
            "reason": f"–ü–µ—Ä–µ–≤–∞–≥–∞ {direction}.",
            "market_state": market_state,
            # –¥–æ–¥. —ñ–Ω—Ñ–∞ (–∑—Ä—É—á–Ω–æ –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏)
            "raw": {"final_buy": final_buy, "final_sell": final_sell, "diff": diff}
        }
