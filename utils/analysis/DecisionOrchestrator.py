import asyncio
import traceback
import pandas as pd

from typing import Dict, List, Optional
from utils.analysis.DecisionEngine import DecisionEngine
from utils.financial.FinancialAdvisor import FinancialAdvisor
from utils.financial.FinancialContext import FinancialContext
from utils.connectors.NewsFetcher import NewsFetcher
from utils.connectors.NewsAnalyzer import NewsAnalyzer
from utils.common.SettingsLoader import SettingsLoader, SettingsLoaderStrategies
from utils.strategies.StrategyObject import StrategyObject
from utils.analysis.DecisionPolicy import HysteresisCooldownPolicy

class DecisionOrchestrator:
    """
    Orchestrator: –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—î TimeframeAgent-–∏, –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ ‚Äî –∞–Ω–∞–ª—ñ–∑ –Ω–æ–≤–∏–Ω,
    —ñ —Ñ–æ—Ä–º—É—î —Ñ—ñ–Ω–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è —á–µ—Ä–µ–∑ DecisionEngine.
    """

    def __init__(
        self,
        timeframe_agents: List,
        # –ù–û–í–ò–ô –ü–ê–†–ê–ú–ï–¢–†: —Å–ª–æ–≤–Ω–∏–∫ –∑ —Å–∏—Ä–∏–º–∏ –¥–∞–Ω–∏–º–∏ –ø–æ –∫–æ–∂–Ω–æ–º—É –¢–§
        raw_data_by_tf: Dict[str, pd.DataFrame], 
        timeframe_weights: Dict,
        metric_weights: Dict,
        strategy_configs: Dict,
        user_financial_settings: Dict,
        trade_mode: str = 'spot',
        enable_news: bool = True
    ):
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–π–º–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç—ñ–≤, –∞ –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π
        self.timeframe_agents = timeframe_agents
        self.timeframe_weights = timeframe_weights
        self.metric_weights = metric_weights
        self.raw_data_by_tf = raw_data_by_tf

        strategy_weights = {name: config.get('weight', 1.0) for name, config in strategy_configs.items()}
        self.engine = DecisionEngine(timeframe_weights, metric_weights, strategy_weights)
        self.strategy_configs = strategy_configs
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —Ü—å–æ–º—É –∫–ª–∞—Å—ñ
        self.strategy_configs = strategy_configs
        self.enable_news = enable_news

        # –¶–µ–π –∫–æ–¥ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è, –≤—ñ–Ω –Ω–µ —î –ø—Ä–∏—á–∏–Ω–æ—é –ø–æ–º–∏–ª–∫–∏, –∞–ª–µ –º–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è –¥–ª—è –Ω–æ–≤–∏–Ω
        self.gui_settings_loader = SettingsLoader("GUI")
        self.tf_configurations_from_gui = self.gui_settings_loader.get_nested_setting(['user_selections', 'tf_configurations'], {})

        # --- –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø –§–Ü–ù–ê–ù–°–û–í–ò–• –ú–û–î–£–õ–Ü–í ---
        self.advisor = FinancialAdvisor()
        self.financial_context = FinancialContext(
            user_settings=user_financial_settings,
            advisor=self.advisor,
            trade_mode=trade_mode
        )

        self.policy = HysteresisCooldownPolicy(conf_margin=0.07, cooldown_bars=3)

        if self.enable_news:
            gui_sources = self.gui_settings_loader.get_nested_setting(['user_selections', 'news_sources'], [])
            gui_multipliers = self.gui_settings_loader.get_nested_setting(['user_selections', 'news_multipliers'], {})
            
            analyzer_defaults = SettingsLoader("NewsAnalyzer").settings
            keywords = analyzer_defaults.get("keywords", {})

            fetcher_config = {'sources': gui_sources}
            analyzer_config = {'keywords': keywords, 'impact_multipliers': gui_multipliers}

            self.news_fetcher = NewsFetcher(config=fetcher_config)
            self.news_analyzer = NewsAnalyzer(config=analyzer_config)
            print("üì∞ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞–≤ –Ω–æ–≤–∏–Ω–Ω—ñ –º–æ–¥—É–ª—ñ.")

    def _current_bar_index(self) -> int:
        """
        –î—É–∂–µ –ø—Ä–æ—Å—Ç–∞ –æ—Ü—ñ–Ω–∫–∞ ¬´–ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞—Ä—É¬ª: –±–µ—Ä–µ–º–æ –Ω–∞–π–¥–æ–≤—à–∏–π DataFrame –∑ raw_data_by_tf.
        –Ø–∫—â–æ —Ö–æ—á–µ—à ‚Äî —Ç—É—Ç –º–æ–∂–Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å primary TF.
        """
        if not self.raw_data_by_tf:
            return 0
        return max(len(df) for df in self.raw_data_by_tf.values() if df is not None)

    def _run_strategy_analysis(self) -> Dict:
        """
        –ü–û–í–ù–Ü–°–¢–Æ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î.
        –ó–∞–ø—É—Å–∫–∞—î –∞–Ω–∞–ª—ñ–∑ –ø–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è—Ö, –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª—è—é—á–∏ —ó—Ö –∑ –¥–∞–Ω–∏–º–∏.
        """
        strategy_signals = {}
        active_strategies = [
            name for name, config in self.strategy_configs.items() if config.get('enabled', False)
        ]
        
        if not active_strategies:
            return {}

        print("\n--- ‚ôüÔ∏è –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É –ø–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è—Ö (–ù–æ–≤–∞ –ª–æ–≥—ñ–∫–∞) ---")
        for strategy_key in active_strategies:
            # 1. –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ü—ñ–π —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
            required_tf = self._peek_strategy_tf(strategy_key)
            if not required_tf:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é '{strategy_key}': –Ω–µ –≤–∫–∞–∑–∞–Ω–æ 'timeframe_id' –≤ —ó—ó .json —Ñ–∞–π–ª—ñ.")
                continue

            # 2. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Å–∏—Ä—ñ –¥–∞–Ω—ñ
            raw_ohlcv_data = self.raw_data_by_tf.get(required_tf)
            if raw_ohlcv_data is None or raw_ohlcv_data.empty:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é '{strategy_key}': –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —ó—ó —Ç–∞–π–º—Ñ—Ä–µ–π–º—É '{required_tf}'.")
                continue

            # 3. –°—Ç–≤–æ—Ä—é—î–º–æ StrategyObject –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            try:
                # –ü–µ—Ä–µ–¥–∞—î–º–æ —Å–∏—Ä—ñ –¥–∞–Ω—ñ. –†–µ—à—Ç—É StrategyObject –∑—Ä–æ–±–∏—Ç—å —Å–∞–º.
                strat = StrategyObject(strategy_key=strategy_key, raw_ohlcv_data=raw_ohlcv_data)
                signals = strat.generate_signals()
                if signals.empty: continue
                
                last_signal = signals.iloc[-1]
                strategy_signals[strategy_key] = last_signal
                print(f"  - –°—Ç—Ä–∞—Ç–µ–≥—ñ—è '{strategy_key}' ({required_tf}) –¥–∞—î —Å–∏–≥–Ω–∞–ª: {last_signal.upper()}")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó '{strategy_key}': {e}")
                traceback.print_exc() # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –¥–µ–±–∞–≥—É
                
        return strategy_signals
    
    def _peek_strategy_tf(self, strategy_key: str) -> Optional[str]:
        """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ–± "–ø—ñ–¥–≥–ª—è–Ω—É—Ç–∏" timeframe_id —É —Ñ–∞–π–ª—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó."""
        try:
            loader = SettingsLoaderStrategies(module_name="Strategies", name_strategy=strategy_key)
            return loader.settings.get("timeframe_id")
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ timeframe_id –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó '{strategy_key}': {e}")
            return None

    def _find_best_timeframe(self, analysis_results: Dict) -> str:
        """
        –í–∏–∑–Ω–∞—á–∞—î –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –≤—Ö–æ–¥—É –≤ —É–≥–æ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ
        –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó —Å–∏–ª–∏ —Å–∏–≥–Ω–∞–ª—É —Ç–∞ –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É.

        :param analysis_results: –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥ —É—Å—ñ—Ö TimeframeAgent.
        :return: –ù–∞–∑–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É (–Ω–∞–ø—Ä., '1h').
        """
        best_tf = None
        max_score = -1

        print("\n--- üìà –û—Ü—ñ–Ω–∫–∞ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤ –¥–ª—è —É–≥–æ–¥–∏ ---")
        for tf, metrics in analysis_results.items():
            # –ë–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏
            state_strength = metrics.get('state_strength', 0.0)
            smc_confidence = metrics.get('smc_confidence', 0.0)
            
            # –í–∞–≥–∞, —â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å —Å—Ç–∞—Ä—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
            reliability_weight = self.timeframe_weights.get(tf, 1.0)

            # –§–æ—Ä–º—É–ª–∞ –æ—Ü—ñ–Ω–∫–∏: (–°–∏–ª–∞ —Å—Ç–∞–Ω—É + –°–∏–ª–∞ SMC) * –ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å –¢–§
            # –¶–µ –Ω–∞–¥–∞—î –ø–µ—Ä–µ–≤–∞–≥—É –¢–§ –∑ —á—ñ—Ç–∫–∏–º —Å–∏–≥–Ω–∞–ª–æ–º —Ç–∞ –≤–∏—â–æ—é –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—é.
            score = (state_strength + smc_confidence) * reliability_weight
            
            print(f"  - {tf}: –°–∏–ª–∞ —Å—Ç–∞–Ω—É={state_strength:.2f}, –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å SMC={smc_confidence:.2f}, –í–∞–≥–∞={reliability_weight:.2f} -> –†–∞—Ö—É–Ω–æ–∫: {score:.2f}")

            if score > max_score:
                max_score = score
                best_tf = tf
        
        print(f"üèÜ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤: {best_tf} (–†–∞—Ö—É–Ω–æ–∫: {max_score:.2f})")
        return best_tf

    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞—î –∞–Ω–∞–ª—ñ–∑ –≤—Å—ñ—Ö TimeframeAgent, –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –Ω–æ–≤–∏–Ω, —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—ñ—à–µ–Ω–Ω—è.
        """
        # 1. –ê–Ω–∞–ª—ñ–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤ (—Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑)
        analysis_results = {}
        for agent in self.timeframe_agents:
            tf_result = agent.run_analysis()
            tf_name = tf_result.get("timeframe")
            if tf_name:
                analysis_results[tf_name] = tf_result
            else:
                print(f"[Warning] TimeframeAgent –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ 'timeframe': {tf_result}")

        # 1.5. –ê–Ω–∞–ª—ñ–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è—Ö
        strategy_signals = self._run_strategy_analysis()

        # 2. –ê–Ω–∞–ª—ñ–∑ –Ω–æ–≤–∏–Ω (—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑)
        processed_articles = None
        if self.enable_news:
            print("üîÑ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑ –Ω–æ–≤–∏–Ω...")
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏ –∫–æ–¥—É
            async def run_async_tasks():
                articles = await self.news_fetcher.fetch_all()
                if not articles:
                    return None
                return self.news_analyzer.process_articles(articles)

            try:
                processed_articles = asyncio.run(run_async_tasks())
                if processed_articles:
                    print(f"‚úÖ –ù–æ–≤–∏–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ. –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(processed_articles)}")
                else:
                    print("‚ÑπÔ∏è –°–≤—ñ–∂–∏—Ö –Ω–æ–≤–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –Ω–æ–≤–∏–Ω: {e}")

        # 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è –≤—ñ–¥ "–º–æ–∑–∫—É"
        technical_decision = self.engine.make_decision(analysis_results, processed_articles, strategy_signals)

        bar_idx = self._current_bar_index()
        final_dir, final_conf = self.policy.decide(
            technical_decision.get("direction", "neutral"),
            float(technical_decision.get("confidence", 0.0)),
            bar_idx
        )
        technical_decision["direction"] = final_dir
        technical_decision["confidence"] = round(final_conf, 3)
        technical_decision["policy_bar_idx"] = bar_idx
        
        # --- –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø: –í–ò–ë–Ü–† –¢–§ –¢–ê –ó–ë–ê–ì–ê–ß–ï–ù–ù–Ø –§–Ü–ù–ê–ù–°–û–í–ò–ú –ö–û–ù–¢–ï–ö–°–¢–û–ú ---
        
        # 3.1. –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É
        recommended_tf = self._find_best_timeframe(analysis_results)
        
        financial_briefing = {}
        if recommended_tf:
            primary_agent = next((agent for agent in self.timeframe_agents if agent.timeframe == recommended_tf), None)
            
            # 3.2. –í–∏—Ç—è–≥—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É —Ç–∞ ATR –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ–≥–æ –¢–§
            current_price = primary_agent.data['close'].iloc[-1]
            atr_column = next((col for col in primary_agent.data.columns if 'ATR' in col), None)
            atr_value = primary_agent.data[atr_column].iloc[-1] if atr_column and not primary_agent.data[atr_column].empty else None
            
            # 3.3. –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –±—Ä–∏—Ñ—ñ–Ω–≥
            financial_briefing = self.financial_context.generate_financial_briefing(
                signal_data=technical_decision,
                current_price=current_price,
                atr_value=atr_value
            )
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ, —è–∫–∏–π –¢–§ –±—É–≤ –æ–±—Ä–∞–Ω–∏–π
            financial_briefing['recommended_tf_for_financials'] = recommended_tf
        else:
            financial_briefing = {
                "status": "error", 
                "reason": "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤."
            }

        # 4. –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_result = {
            "technical_decision": technical_decision,
            "financial_briefing": financial_briefing,
            "raw_analysis_by_tf": analysis_results
        }
        
        return final_result
    