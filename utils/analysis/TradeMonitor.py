# utils/analysis/TradeMonitor.py

import threading
import time
import datetime
from typing import Dict, List
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor

from utils.common.HistoryDB import HistoryDB
from utils.connectors.ConnectionController import ConnectionController

class TradeMonitor:
    """
    –ö–ª–∞—Å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —É–≥–æ–¥ –∑ –ø–∞–∫–µ—Ç–Ω–∏–º –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º —Ü—ñ–Ω —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é –∑ –±—ñ—Ä–∂–µ—é.
    """

    def __init__(self, connection_controller: ConnectionController, history_db: HistoryDB, check_interval_seconds: int = 30):
        self.connection_controller = connection_controller
        self.history_db = history_db
        self.check_interval = check_interval_seconds
        
        self._stop_event = threading.Event()
        self._thread = None
        self.log_callback = None

    def set_logger(self, log_callback):
        self.log_callback = log_callback

    def _log(self, message: str):
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        full_message = f"[{timestamp}] {message}"
        print(full_message)
        if self.log_callback:
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ª–æ–≥–µ—Ä –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ Kivy
            from kivy.clock import Clock
            Clock.schedule_once(lambda dt: self.log_callback(full_message))

    def start(self):
        if self._thread and self._thread.is_alive():
            self._log("‚ö†Ô∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.")
            return
        self._stop_event.clear()
        self._thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self._thread.start()
        self._log("‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É–≥–æ–¥ –∑–∞–ø—É—â–µ–Ω–æ (–∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é).")

    def stop(self):
        self._stop_event.set()
        if self._thread:
            self._thread.join(timeout=5)
        self._log("üõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É–≥–æ–¥ –∑—É–ø–∏–Ω–µ–Ω–æ.")

    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î —É–≥–æ–¥–∏."""
        while not self._stop_event.is_set():
            try:
                open_trades = self.history_db.get_all_open_trades()
                if not open_trades:
                    # –ß–µ–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É —ñ—Ç–µ—Ä–∞—Ü—ñ—é, –∞–ª–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
                    if self._stop_event.wait(self.check_interval):
                        break
                    continue

                self._log(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ {len(open_trades)} –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö —É–≥–æ–¥...")
                
                # –ì—Ä—É–ø—É—î–º–æ —É–≥–æ–¥–∏ –∑–∞ –±—ñ—Ä–∂–µ—é –¥–ª—è –ø–∞–∫–µ—Ç–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                trades_by_exchange = defaultdict(list)
                for trade in open_trades:
                    trades_by_exchange[trade['exchange']].append(trade)

                # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω—É –±—ñ—Ä–∂—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
                with ThreadPoolExecutor(max_workers=len(trades_by_exchange)) as executor:
                    futures = [executor.submit(self._process_exchange_trades, ex, trs)
                               for ex, trs in trades_by_exchange.items()]
                    for future in futures:
                        if self._stop_event.is_set():
                            break
                        # –ü–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∏–Ω–∏–∫–ª–∏ –≤ —Ä–æ–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–∞—Ö
                        future.result()

            except Exception as e:
                self._log(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            
            if self._stop_event.wait(self.check_interval):
                break

    def _process_exchange_trades(self, exchange_name: str, trades: List[Dict]):
        """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —É–≥–æ–¥–∏ –¥–ª—è –æ–¥–Ω—ñ—î—ó –±—ñ—Ä–∂—ñ."""
        api = self.connection_controller.get_api(exchange_name)
        if not api or not api.is_connected(): return

        symbols = list(set(t['symbol'] for t in trades))
        
        try:
            # --- –ö–†–û–ö 1: –ü–∞–∫–µ—Ç–Ω–∏–π –∑–∞–ø–∏—Ç —Ü—ñ–Ω (–≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ "–∑–∞–≤–∏—Å–∞–Ω–Ω—è") ---
            tickers = api.client.fetch_tickers(symbols)
            positions = api.fetch_positions(symbols)
            
            for trade in trades:
                symbol = trade['symbol']
                
                # --- –ö–†–û–ö 2: –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –∑ –±—ñ—Ä–∂–µ—é ---
                position = positions.get(symbol)
                if position is None:
                    self._handle_closed_on_exchange(trade, api)
                    continue

                # --- –ö–†–û–ö 3: –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ü—ñ–Ω–∏, —è–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞ ---
                if symbol in tickers and tickers[symbol].get('last') is not None:
                    current_price = tickers[symbol]['last']
                    self._log_trade_status(trade, current_price) # –î–µ—Ç–∞–ª—å–Ω–∏–π –ª–æ–≥
                    self._check_sl_tp(trade, current_price)
                else:
                    self._log(f"  - ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —Ü—ñ–Ω—É –¥–ª—è {symbol} –Ω–∞ {exchange_name}.")

        except Exception as e:
            self._log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —É–≥–æ–¥ –Ω–∞ {exchange_name}: {e}")

    def _log_trade_status(self, trade: Dict, current_price: float):
        """–§–æ—Ä–º–∞—Ç—É—î —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –ª–æ–≥ –¥–ª—è –æ–¥–Ω—ñ—î—ó —É–≥–æ–¥–∏."""
        direction = trade['direction'].upper()
        symbol = trade['symbol']
        entry = trade['entry_price']
        sl = trade['stop_loss']
        tp = trade['take_profit']
        
        size = trade['size']

        if trade['direction'] == 'buy':
            pnl = (current_price - entry) * size
        else:
            pnl = (entry - current_price) * size

        log_msg = (
            f"  - –°–ª—ñ–¥–∫—É—é –∑–∞ {direction} {symbol}: "
            f"–í—Ö—ñ–¥={entry:.4f}, SL={sl:.4f}, TP={tp:.4f} | "
            f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price:.4f} | P/L: ${pnl:.2f}"
        )
        self._log(log_msg)

    def _check_sl_tp(self, trade: Dict, current_price: float):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è SL/TP."""
        exit_price, exit_reason = None, None
        if trade['direction'] == 'buy':
            if current_price <= trade['stop_loss']: exit_price, exit_reason = trade['stop_loss'], 'Stop Loss'
            elif current_price >= trade['take_profit']: exit_price, exit_reason = trade['take_profit'], 'Take Profit'
        elif trade['direction'] == 'sell':
            if current_price >= trade['stop_loss']: exit_price, exit_reason = trade['stop_loss'], 'Stop Loss'
            elif current_price <= trade['take_profit']: exit_price, exit_reason = trade['take_profit'], 'Take Profit'

        if exit_price and exit_reason:
            self._close_trade_in_db(trade, exit_price, exit_reason)

    def _handle_closed_on_exchange(self, trade: Dict, api):
        """–û–±—Ä–æ–±–ª—è—î —É–≥–æ–¥–∏, —è–∫—ñ –≤–∂–µ –∑–∞–∫—Ä–∏—Ç—ñ –Ω–∞ –±—ñ—Ä–∂—ñ."""
        self._log(f"  - –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø: –ü–æ–∑–∏—Ü—ñ—è {trade['symbol']} –∑–∞–∫—Ä–∏—Ç–∞ –Ω–∞ –±—ñ—Ä–∂—ñ. –®—É–∫–∞—é —ñ—Å—Ç–æ—Ä—ñ—é...")
        
        # –®—É–∫–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —É–≥–æ–¥ –±—ñ—Ä–∂—ñ, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—É —Ü—ñ–Ω—É –≤–∏—Ö–æ–¥—É
        entry_time_ms = int(datetime.datetime.strptime(trade['entry_time'], "%Y-%m-%d %H:%M:%S").timestamp() * 1000)
        exchange_trades = api.fetch_my_trades(symbol=trade['symbol'], since=entry_time_ms, limit=10)
        
        closing_trade = None
        for ex_trade in reversed(exchange_trades): # –®—É–∫–∞—î–º–æ –∑ –∫—ñ–Ω—Ü—è, –±–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –±—É–¥–µ –ø—ñ–∑–Ω—ñ—à–µ
            # –£–º–æ–≤–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è: –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π –Ω–∞–ø—Ä—è–º–æ–∫ —Ç–∞ –∑–≤'—è–∑–æ–∫ –ø–æ ID –æ—Ä–¥–µ—Ä–∞ (—è–∫—â–æ —î)
            is_closing_side = (ex_trade['side'] == 'sell' and trade['direction'] == 'buy') or \
                              (ex_trade['side'] == 'buy' and trade['direction'] == 'sell')
            
            if is_closing_side:
                closing_trade = ex_trade
                break
        
        if closing_trade:
            exit_price = closing_trade['price']
            exit_time_dt = datetime.datetime.fromtimestamp(closing_trade['timestamp'] / 1000)
            exit_time_str = exit_time_dt.strftime("%Y-%m-%d %H:%M:%S")
            self._log(f"  - –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è: –¶—ñ–Ω–∞={exit_price}, –ß–∞—Å={exit_time_str}")
            self._close_trade_in_db(trade, exit_price, "Closed on Exchange (Synced)", exit_time_override=exit_time_str)
        else:
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–¥–æ–º—ñ–π —Ü—ñ–Ω—ñ
            self._log(f"  - ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—É —É–≥–æ–¥—É –∑–∞–∫—Ä–∏—Ç—Ç—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó. –ó–∞–∫—Ä–∏–≤–∞—é –ø–æ –ø—Ä–∏–±–ª–∏–∑–Ω—ñ–π —Ü—ñ–Ω—ñ.")
            ticker = api.client.fetch_ticker(trade['symbol'])
            last_price = ticker.get('last', trade['entry_price'])
            self._close_trade_in_db(trade, last_price, "Closed on Exchange (Approx.)")

    def _close_trade_in_db(self, trade: Dict, exit_price: float, reason: str, exit_time_override: str = None):
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î P/L —Ç–∞ –æ–Ω–æ–≤–ª—é—î –∑–∞–ø–∏—Å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
        if trade['direction'] == 'buy':
            pnl = (exit_price - trade['entry_price']) * trade['size']
        else:
            pnl = (trade['entry_price'] - exit_price) * trade['size']

        exit_time = exit_time_override or datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        self.history_db.update_trade_exit(
            trade_uuid=trade['trade_uuid'],
            exit_time=exit_time,
            exit_price=exit_price,
            profit_loss=pnl,
            exit_reason=reason
        )
        self._log(f" ‚úîÔ∏è –£–≥–æ–¥—É {trade['symbol']} #{trade['trade_uuid'][:8]} –∑–∞–∫—Ä–∏—Ç–æ –ø–æ {reason}. P/L: ${pnl:.2f}")