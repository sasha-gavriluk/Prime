# utils/common/Database.py

import os
import duckdb
import pandas as pd
from typing import Dict, List, Any

from utils.common.other_utils import ensure_directory_exists

class DatabaseManager:
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö DuckDB.
    –ù–∞–¥–∞—î –º–æ–¥—É–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å,
    –≤—Å—Ç–∞–≤–∫–∏, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏–±—ñ—Ä–∫–∏ –¥–∞–Ω–∏—Ö.
    """
    def __init__(self, db_file: str, read_only: bool = False):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.

        :param db_file: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö DuckDB.
        :param read_only: –í—ñ–¥–∫—Ä–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö —É —Ä–µ–∂–∏–º—ñ –ª–∏—à–µ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è.
        """
        self.db_file = db_file
        self.read_only = read_only
        self.conn = None
        ensure_directory_exists(os.path.dirname(db_file))
        self.connect()

    def connect(self):
        """–ü—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö DuckDB."""
        try:
            self.conn = duckdb.connect(database=self.db_file, read_only=self.read_only)
            print(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ DuckDB: '{self.db_file}'")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ DuckDB: {e}")
            self.conn = None

    def disconnect(self):
        """–ó–∞–∫—Ä–∏–≤–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
        if self.conn:
            self.conn.close()
            self.conn = None
            print("üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ DuckDB –∑–∞–∫—Ä–∏—Ç–æ.")

    def execute(self, query: str, params: tuple = ()):
        """–í–∏–∫–æ–Ω—É—î SQL-–∑–∞–ø–∏—Ç –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
        if not self.conn:
            raise ConnectionError("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        try:
            self.conn.execute(query, params)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: {query}\n{e}")
            raise

    def fetch_df(self, query: str, params: tuple = ()) -> pd.DataFrame:
        """–í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –≤–∏–≥–ª—è–¥—ñ pandas DataFrame."""
        if not self.conn:
            raise ConnectionError("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        try:
            return self.conn.execute(query, params).fetchdf()
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {query}\n{e}")
            raise
            
    def table_exists(self, table_name: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ."""
        query = "SELECT 1 FROM information_schema.tables WHERE table_name = ?"
        result = self.fetch_df(query, (table_name,))
        return not result.empty

    def create_table(self, table_name: str, columns: Dict[str, str], unique_columns: List[str] = None):
        """
        –°—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—é, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î.
        –ë–µ–∑ –∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç—ñ–≤ (IDENTITY), —Å—É–º—ñ—Å–Ω–æ –∑ –±—É–¥—å-—è–∫–æ—é –≤–µ—Ä—Å—ñ—î—é DuckDB.
        """
        if not self.conn:
            raise ConnectionError("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")

        # —è–∫—â–æ –≤–∂–µ —î ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–∏–π—Ç–∏
        if self.table_exists(table_name):
            print(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—è '{table_name}' –≤–∂–µ —ñ—Å–Ω—É—î.")
            return

        unique_columns = unique_columns or []

        # —Ñ–æ—Ä–º—É—î–º–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ —è–∫ —î, –±–µ–∑ –ø—ñ–¥–º—ñ–Ω 'IDENTITY/GENERATED'
        col_defs = [f"{name} {dtype}" for name, dtype in columns.items()]

        # –¥–æ–¥–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è, —è–∫—â–æ —Ç—Ä–µ–±–∞
        constraints = []
        if unique_columns:
            constraints.append(f"UNIQUE ({', '.join(unique_columns)})")

        sql = f"CREATE TABLE {table_name} ({', '.join(col_defs + constraints)});"
        self.execute(sql)
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü—é '{table_name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ.")


    def insert_data(self, table_name: str, data: Dict[str, Any]):
        """–í—Å—Ç–∞–≤–ª—è—î –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –¥–∞–Ω–∏—Ö —É —Ç–∞–±–ª–∏—Ü—é."""
        columns = ', '.join(data.keys())
        placeholders = ', '.join(['?'] * len(data))
        query = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders});"
        self.execute(query, tuple(data.values()))

    def update_data(self, table_name: str, data: Dict[str, Any], where_conditions: Dict[str, Any]):
        """–û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ."""
        set_clause = ', '.join([f"{col} = ?" for col in data.keys()])
        where_clause = ' AND '.join([f"{col} = ?" for col in where_conditions.keys()])
        
        values = list(data.values()) + list(where_conditions.values())
        query = f"UPDATE {table_name} SET {set_clause} WHERE {where_clause};"
        self.execute(query, tuple(values))

    def fetch_data_df(self, table_name: str, where_conditions: Dict = None, limit: int = None, order_by: str = None) -> pd.DataFrame:
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ —É –≤–∏–≥–ª—è–¥—ñ DataFrame."""
        query = f"SELECT * FROM {table_name}"
        params = []

        if where_conditions:
            conditions = ' AND '.join([f"{col} = ?" for col in where_conditions.keys()])
            query += f" WHERE {conditions}"
            params.extend(where_conditions.values())

        if order_by:
            query += f" ORDER BY {order_by}"

        if limit is not None:
            query += f" LIMIT {limit}"

        return self.fetch_df(query, tuple(params))

    def clear_all_tables(self):
        """–û—á–∏—â–∞—î –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
        tables_df = self.fetch_df("SELECT table_name FROM information_schema.tables WHERE table_schema = 'main'")
        for table_name in tables_df['table_name']:
            self.execute(f"DELETE FROM {table_name};")
            print(f"üóëÔ∏è –¢–∞–±–ª–∏—Ü—é '{table_name}' –æ—á–∏—â–µ–Ω–æ.")
            
    def __del__(self):
        self.disconnect()