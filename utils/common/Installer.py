# utils/common/Installer.py

import os
import json
from .other_utils import get_project_root, ensure_directory_exists
from .SettingsLoader import (
    DecisionSettingsManager,
    FinancialSettingsManager,
    MarketStateSettingsManager,
    ProcessingSettingsBuilder
)
from .HistoryDB import HistoryDB
from .FileStructureManager import FileStructureManager

class Installer:
    """
    –ö–ª–∞—Å, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö
    –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —ñ —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏.
    """
    def __init__(self):
        self.root_dir = get_project_root()
        print("üöÄ –ó–∞–ø—É—Å–∫ —ñ–Ω—Å—Ç–∞–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ—î–∫—Ç—É...")

    def run_setup(self):
        """
        –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥, —è–∫–∏–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –≤–∏–∫–æ–Ω—É—î –≤—Å—ñ –∫—Ä–æ–∫–∏
        –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.
        """
        print("\n--- 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π ---")
        self._create_directories()

        print("\n--- 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ---")
        self._create_api_keys_template()
        self._create_default_strategy_template()

        print("\n--- 3. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –º–æ–¥—É–ª—ñ–≤ ---")
        self._initialize_settings_modules()

        print("\n--- 4. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —ñ—Å—Ç–æ—Ä—ñ—ó ---")
        self._initialize_database()

        print("\n--- 5. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ —Ñ–∞–π–ª–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ ---")
        self._refresh_file_structure_map()

        print("\n‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ!")

    def _create_directories(self):
        """–°—Ç–≤–æ—Ä—é—î –±–∞–∑–æ–≤—ñ –ø–∞–ø–∫–∏, —è–∫—â–æ –≤–æ–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ."""
        # –°–ø–∏—Å–æ–∫ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
        required_dirs = [
            'data',
            'data/Settings',
            'data/Strategies',
            'data/Backups',
            'data/Binance',
            'data/Bybit',
            'logs',
            'logs/backtests'
        ]
        for dir_name in required_dirs:
            dir_path = os.path.join(self.root_dir, dir_name)
            if not os.path.exists(dir_path):
                ensure_directory_exists(dir_path) #
                print(f"   –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {dir_path}")
            else:
                print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —ñ—Å–Ω—É—î: {dir_path}")

    def _create_api_keys_template(self):
        """–°—Ç–≤–æ—Ä—é—î —à–∞–±–ª–æ–Ω –¥–ª—è –∫–ª—é—á—ñ–≤ API, —è–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π."""
        keys_path = os.path.join(self.root_dir, 'data', 'Settings', 'Settings_keys.json')
        if not os.path.exists(keys_path):
            api_template = {
              "binance": {
                "api_key": "YOUR_BINANCE_API_KEY",
                "api_secret": "YOUR_BINANCE_API_SECRET"
              },
              "bybit": {
                "api_key": "YOUR_BYBIT_API_KEY",
                "api_secret": "YOUR_BYBIT_API_SECRET"
              }
            }
            with open(keys_path, 'w', encoding='utf-8') as f:
                json.dump(api_template, f, indent=4)
            print(f"   –°—Ç–≤–æ—Ä–µ–Ω–æ —à–∞–±–ª–æ–Ω –¥–ª—è –∫–ª—é—á—ñ–≤ API: {keys_path}")
            print("   ‚ö†Ô∏è –í–∞–∂–ª–∏–≤–æ: –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ü–µ–π —Ñ–∞–π–ª –≤–∞—à–∏–º–∏ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ API.")
        else:
            print(f"   –§–∞–π–ª –∫–ª—é—á—ñ–≤ API —ñ—Å–Ω—É—î: {keys_path}")

    def _create_default_strategy_template(self):
        """–°—Ç–≤–æ—Ä—é—î –ø—Ä–∏–∫–ª–∞–¥ —Ñ–∞–π–ª—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ñ–æ—Ä–º–∞—Ç."""
        strategy_path = os.path.join(self.root_dir, 'data', 'Strategies', 'example_strategy_strategy.json') #
        if not os.path.exists(strategy_path):
            strategy_template = {
                "name": "Example RSI Crossover",
                "goal": "Buy when RSI is oversold, Sell when RSI is overbought.",
                "timeframe_id": "1h",
                "required_indicators": [
                    {"name": "RSI", "parameters": {"period": 14}}
                ],
                "entry_conditions": [
                    {
                        "type": "Threshold",
                        "params": {"source": "RSI_14", "threshold": 30, "operator": "<"}
                    }
                ],
                "exit_conditions": [
                    {
                        "type": "Threshold",
                        "params": {"source": "RSI_14", "threshold": 70, "operator": ">"}
                    }
                ],
                "filters": [],
                "risk_params": {"stop_loss_pct": 2.0, "take_profit_ratio": 1.5}
            }
            with open(strategy_path, 'w', encoding='utf-8') as f:
                json.dump(strategy_template, f, indent=4)
            print(f"   –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó: {strategy_path}")
        else:
            print(f"   –ü—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —ñ—Å–Ω—É—î: {strategy_path}")

    def _initialize_settings_modules(self):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–ª–∞—Å–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å, —â–æ–± –≤–æ–Ω–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ —Å–≤–æ—ó —Ñ–∞–π–ª–∏
        –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏.
        """
        print("   –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è:")
        ProcessingSettingsBuilder().ensure_defaults_exist() #
        print("     - DataProcessingManager")
        DecisionSettingsManager().ensure_defaults_exist() #
        print("     - DecisionEngine")
        MarketStateSettingsManager().ensure_defaults_exist() #
        print("     - MarketStateDetector")
        FinancialSettingsManager().ensure_defaults_exist() #
        print("     - FinancialAdvisor")

    def _initialize_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é, —è–∫–∏–π —Å–∞–º —Å—Ç–≤–æ—Ä–∏—Ç—å –ë–î."""
        HistoryDB() #
        print("   –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ—Å—Ç–æ—Ä—ñ—ó —É–≥–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞/—Å—Ç–≤–æ—Ä–µ–Ω–∞.")

    def _refresh_file_structure_map(self):
        """–û–Ω–æ–≤–ª—é—î –∫–∞—Ä—Ç—É —Ñ–∞–π–ª–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤."""
        fsm = FileStructureManager() #
        fsm.refresh_structure() #
        print("   –ö–∞—Ä—Ç—É —Ñ–∞–π–ª–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.")